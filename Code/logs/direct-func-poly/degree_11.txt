X.shape == torch.Size([10000, 1])
scale_factor == 0.46333059668540955
Y.shape == torch.Size([10000, 1])
X_train.shape == torch.Size([8000, 1]), Y_train.shape == torch.Size([8000, 1])
X_val.shape == torch.Size([1000, 1]), Y_val.shape == torch.Size([1000, 1])
X_test.shape == torch.Size([1000, 1]), Y_test.shape == torch.Size([1000, 1])
Cross-validating across 128 models.
[1/128]	Width:128, lr:0.001, w_d:0.0001 => Score:-0.168708
[2/128]	Width:128, lr:0.001, w_d:0.001 => Score:-0.168709
[3/128]	Width:128, lr:0.001, w_d:0.01 => Score:-0.168786
[4/128]	Width:128, lr:0.001, w_d:0.1 => Score:-0.168781
[5/128]	Width:128, lr:0.001, w_d:1.0 => Score:-0.169404
[6/128]	Width:128, lr:0.001, w_d:10.0 => Score:-0.169152
[7/128]	Width:128, lr:0.001, w_d:100.0 => Score:-0.168753
[8/128]	Width:128, lr:0.001, w_d:0.0 => Score:-0.168708
[9/128]	Width:128, lr:0.01, w_d:0.0001 => Score:-0.160414
[10/128]	Width:128, lr:0.01, w_d:0.001 => Score:-0.160595
[11/128]	Width:128, lr:0.01, w_d:0.01 => Score:-0.162131
[12/128]	Width:128, lr:0.01, w_d:0.1 => Score:-0.164126
[13/128]	Width:128, lr:0.01, w_d:1.0 => Score:-0.165441
[14/128]	Width:128, lr:0.01, w_d:10.0 => Score:-0.165521
[15/128]	Width:128, lr:0.01, w_d:100.0 => Score:-0.165465
[16/128]	Width:128, lr:0.01, w_d:0.0 => Score:-0.160394
[17/128]	Width:128, lr:0.1, w_d:0.0001 => Score:-0.130074
[18/128]	Width:128, lr:0.1, w_d:0.001 => Score:-0.130700
[19/128]	Width:128, lr:0.1, w_d:0.01 => Score:-0.173507
[20/128]	Width:128, lr:0.1, w_d:0.1 => Score:-0.165647
[21/128]	Width:128, lr:0.1, w_d:1.0 => Score:-0.165600
[22/128]	Width:128, lr:0.1, w_d:10.0 => Score:-0.165469
[23/128]	Width:128, lr:0.1, w_d:100.0 => Score:-0.165469
[24/128]	Width:128, lr:0.1, w_d:0.0 => Score:-0.130334
[25/128]	Width:128, lr:1.0, w_d:0.0001 => Score:-0.230000
[26/128]	Width:128, lr:1.0, w_d:0.001 => Score:-0.131628
[27/128]	Width:128, lr:1.0, w_d:0.01 => Score:-0.189345
[28/128]	Width:128, lr:1.0, w_d:0.1 => Score:-0.165535
[29/128]	Width:128, lr:1.0, w_d:1.0 => Score:-0.165539
[30/128]	Width:128, lr:1.0, w_d:10.0 => Score:-0.165286
[31/128]	Width:128, lr:1.0, w_d:100.0 => Score:-0.163994
[32/128]	Width:128, lr:1.0, w_d:0.0 => Score:-0.248285
[33/128]	Width:256, lr:0.001, w_d:0.0001 => Score:-0.181555
[34/128]	Width:256, lr:0.001, w_d:0.001 => Score:-0.181528
[35/128]	Width:256, lr:0.001, w_d:0.01 => Score:-0.181362
[36/128]	Width:256, lr:0.001, w_d:0.1 => Score:-0.180909
[37/128]	Width:256, lr:0.001, w_d:1.0 => Score:-0.179759
[38/128]	Width:256, lr:0.001, w_d:10.0 => Score:-0.177526
[39/128]	Width:256, lr:0.001, w_d:100.0 => Score:-0.177106
[40/128]	Width:256, lr:0.001, w_d:0.0 => Score:-0.181559
[41/128]	Width:256, lr:0.01, w_d:0.0001 => Score:-0.175572
[42/128]	Width:256, lr:0.01, w_d:0.001 => Score:-0.175634
[43/128]	Width:256, lr:0.01, w_d:0.01 => Score:-0.176557
[44/128]	Width:256, lr:0.01, w_d:0.1 => Score:-0.178405
[45/128]	Width:256, lr:0.01, w_d:1.0 => Score:-0.177679
[46/128]	Width:256, lr:0.01, w_d:10.0 => Score:-0.177466
[47/128]	Width:256, lr:0.01, w_d:100.0 => Score:-0.177307
[48/128]	Width:256, lr:0.01, w_d:0.0 => Score:-0.175533
[49/128]	Width:256, lr:0.1, w_d:0.0001 => Score:-0.146056
[50/128]	Width:256, lr:0.1, w_d:0.001 => Score:-0.147691
[51/128]	Width:256, lr:0.1, w_d:0.01 => Score:-0.185929
[52/128]	Width:256, lr:0.1, w_d:0.1 => Score:-0.177414
[53/128]	Width:256, lr:0.1, w_d:1.0 => Score:-0.177365
[54/128]	Width:256, lr:0.1, w_d:10.0 => Score:-0.177264
[55/128]	Width:256, lr:0.1, w_d:100.0 => Score:-0.177210
[56/128]	Width:256, lr:0.1, w_d:0.0 => Score:-0.146252
[57/128]	Width:256, lr:1.0, w_d:0.0001 => Score:-0.216879
[58/128]	Width:256, lr:1.0, w_d:0.001 => Score:-0.149226
[59/128]	Width:256, lr:1.0, w_d:0.01 => Score:-0.213570
[60/128]	Width:256, lr:1.0, w_d:0.1 => Score:-0.177913
[61/128]	Width:256, lr:1.0, w_d:1.0 => Score:-0.177686
[62/128]	Width:256, lr:1.0, w_d:10.0 => Score:-0.177023
[63/128]	Width:256, lr:1.0, w_d:100.0 => Score:-0.176862
[64/128]	Width:256, lr:1.0, w_d:0.0 => Score:-0.230621
[65/128]	Width:512, lr:0.001, w_d:0.0001 => Score:-0.164147
[66/128]	Width:512, lr:0.001, w_d:0.001 => Score:-0.164154
[67/128]	Width:512, lr:0.001, w_d:0.01 => Score:-0.164271
[68/128]	Width:512, lr:0.001, w_d:0.1 => Score:-0.164103
[69/128]	Width:512, lr:0.001, w_d:1.0 => Score:-0.164266
[70/128]	Width:512, lr:0.001, w_d:10.0 => Score:-0.165694
[71/128]	Width:512, lr:0.001, w_d:100.0 => Score:-0.165979
[72/128]	Width:512, lr:0.001, w_d:0.0 => Score:-0.164145
[73/128]	Width:512, lr:0.01, w_d:0.0001 => Score:-0.155063
[74/128]	Width:512, lr:0.01, w_d:0.001 => Score:-0.155542
[75/128]	Width:512, lr:0.01, w_d:0.01 => Score:-0.160340
[76/128]	Width:512, lr:0.01, w_d:0.1 => Score:-0.165317
[77/128]	Width:512, lr:0.01, w_d:1.0 => Score:-0.166249
[78/128]	Width:512, lr:0.01, w_d:10.0 => Score:-0.166106
[79/128]	Width:512, lr:0.01, w_d:100.0 => Score:-0.165937
[80/128]	Width:512, lr:0.01, w_d:0.0 => Score:-0.155009
[81/128]	Width:512, lr:0.1, w_d:0.0001 => Score:-0.138779
[82/128]	Width:512, lr:0.1, w_d:0.001 => Score:-0.131142
[83/128]	Width:512, lr:0.1, w_d:0.01 => Score:-0.157335
[84/128]	Width:512, lr:0.1, w_d:0.1 => Score:-0.166117
[85/128]	Width:512, lr:0.1, w_d:1.0 => Score:-0.166047
[86/128]	Width:512, lr:0.1, w_d:10.0 => Score:-0.165927
[87/128]	Width:512, lr:0.1, w_d:100.0 => Score:-0.165885
[88/128]	Width:512, lr:0.1, w_d:0.0 => Score:-0.140557
[89/128]	Width:512, lr:1.0, w_d:0.0001 => Score:-0.227132
[90/128]	Width:512, lr:1.0, w_d:0.001 => Score:-0.142025
[91/128]	Width:512, lr:1.0, w_d:0.01 => Score:-0.187111
[92/128]	Width:512, lr:1.0, w_d:0.1 => Score:-0.166156
[93/128]	Width:512, lr:1.0, w_d:1.0 => Score:-0.166020
[94/128]	Width:512, lr:1.0, w_d:10.0 => Score:-0.165651
[95/128]	Width:512, lr:1.0, w_d:100.0 => Score:-0.174045
[96/128]	Width:512, lr:1.0, w_d:0.0 => Score:-0.250946
[97/128]	Width:1024, lr:0.001, w_d:0.0001 => Score:-0.169476
[98/128]	Width:1024, lr:0.001, w_d:0.001 => Score:-0.169514
[99/128]	Width:1024, lr:0.001, w_d:0.01 => Score:-0.169599
[100/128]	Width:1024, lr:0.001, w_d:0.1 => Score:-0.169901
[101/128]	Width:1024, lr:0.001, w_d:1.0 => Score:-0.170184
[102/128]	Width:1024, lr:0.001, w_d:10.0 => Score:-0.168051
[103/128]	Width:1024, lr:0.001, w_d:100.0 => Score:-0.166151
[104/128]	Width:1024, lr:0.001, w_d:0.0 => Score:-0.169476
[105/128]	Width:1024, lr:0.01, w_d:0.0001 => Score:-0.139050
[106/128]	Width:1024, lr:0.01, w_d:0.001 => Score:-0.140673
[107/128]	Width:1024, lr:0.01, w_d:0.01 => Score:-0.151995
[108/128]	Width:1024, lr:0.01, w_d:0.1 => Score:-0.165714
[109/128]	Width:1024, lr:0.01, w_d:1.0 => Score:-0.166678
[110/128]	Width:1024, lr:0.01, w_d:10.0 => Score:-0.166372
[111/128]	Width:1024, lr:0.01, w_d:100.0 => Score:-0.166054
[112/128]	Width:1024, lr:0.01, w_d:0.0 => Score:-0.138889
[113/128]	Width:1024, lr:0.1, w_d:0.0001 => Score:-0.177703
[114/128]	Width:1024, lr:0.1, w_d:0.001 => Score:-0.143128
[115/128]	Width:1024, lr:0.1, w_d:0.01 => Score:-0.149210
[116/128]	Width:1024, lr:0.1, w_d:0.1 => Score:-0.166004
[117/128]	Width:1024, lr:0.1, w_d:1.0 => Score:-0.165951
[118/128]	Width:1024, lr:0.1, w_d:10.0 => Score:-0.165848
[119/128]	Width:1024, lr:0.1, w_d:100.0 => Score:-0.165806
[120/128]	Width:1024, lr:0.1, w_d:0.0 => Score:-0.189333
[121/128]	Width:1024, lr:1.0, w_d:0.0001 => Score:-0.224912
[122/128]	Width:1024, lr:1.0, w_d:0.001 => Score:-0.129841
[123/128]	Width:1024, lr:1.0, w_d:0.01 => Score:-0.203668
[124/128]	Width:1024, lr:1.0, w_d:0.1 => Score:-0.166382
[125/128]	Width:1024, lr:1.0, w_d:1.0 => Score:-0.166237
[126/128]	Width:1024, lr:1.0, w_d:10.0 => Score:-0.242541
[127/128]	Width:1024, lr:1.0, w_d:100.0 => Score:-0.201773
[128/128]	Width:1024, lr:1.0, w_d:0.0 => Score:-0.229608

Best validation score after 20 epochs: -0.129841. Best configuration:
Width:1024, lr:1.0, w_d:0.001
preds_train_nn.shape == torch.Size([8000, 1]), preds_val_nn.shape == torch.Size([1000, 1]), preds_test_nn.shape == torch.Size([1000, 1])
score_train == -0.1323397010564804, score_val == -0.13844117522239685, score_test == -0.023550089448690414
Best params for NTK: {'C': 0.1}
Best score for NTK: -0.12908544725564153
Best params for RBF: {'C': 100.0, 'gamma': 'scale'}
Best score for RBF: -0.005373992775344189
Best kernel: rbf
preds_train_km.shape == (8000,), preds_val_km.shape == (1000,), preds_test_km.shape == (1000,)
score_train == 0.0043829490581552815, score_val == 0.6024467048650041, score_test == 0.004157206521376392
