X.shape == torch.Size([10000, 1])
scale_factor == 0.46333059668540955
Y.shape == torch.Size([10000, 1])
X_train.shape == torch.Size([8000, 1]), Y_train.shape == torch.Size([8000, 1])
X_val.shape == torch.Size([1000, 1]), Y_val.shape == torch.Size([1000, 1])
X_test.shape == torch.Size([1000, 1]), Y_test.shape == torch.Size([1000, 1])
Cross-validating across 128 models.
[1/128]	Width:128, lr:0.001, w_d:0.0001 => Score:-0.137686
[2/128]	Width:128, lr:0.001, w_d:0.001 => Score:-0.137685
[3/128]	Width:128, lr:0.001, w_d:0.01 => Score:-0.137805
[4/128]	Width:128, lr:0.001, w_d:0.1 => Score:-0.138042
[5/128]	Width:128, lr:0.001, w_d:1.0 => Score:-0.138242
[6/128]	Width:128, lr:0.001, w_d:10.0 => Score:-0.138138
[7/128]	Width:128, lr:0.001, w_d:100.0 => Score:-0.137894
[8/128]	Width:128, lr:0.001, w_d:0.0 => Score:-0.137683
[9/128]	Width:128, lr:0.01, w_d:0.0001 => Score:-0.128285
[10/128]	Width:128, lr:0.01, w_d:0.001 => Score:-0.128539
[11/128]	Width:128, lr:0.01, w_d:0.01 => Score:-0.130491
[12/128]	Width:128, lr:0.01, w_d:0.1 => Score:-0.133285
[13/128]	Width:128, lr:0.01, w_d:1.0 => Score:-0.134307
[14/128]	Width:128, lr:0.01, w_d:10.0 => Score:-0.134887
[15/128]	Width:128, lr:0.01, w_d:100.0 => Score:-0.134927
[16/128]	Width:128, lr:0.01, w_d:0.0 => Score:-0.128246
[17/128]	Width:128, lr:0.1, w_d:0.0001 => Score:-0.100926
[18/128]	Width:128, lr:0.1, w_d:0.001 => Score:-0.107044
[19/128]	Width:128, lr:0.1, w_d:0.01 => Score:-0.133562
[20/128]	Width:128, lr:0.1, w_d:0.1 => Score:-0.135047
[21/128]	Width:128, lr:0.1, w_d:1.0 => Score:-0.135020
[22/128]	Width:128, lr:0.1, w_d:10.0 => Score:-0.134947
[23/128]	Width:128, lr:0.1, w_d:100.0 => Score:-0.134949
[24/128]	Width:128, lr:0.1, w_d:0.0 => Score:-0.099971
[25/128]	Width:128, lr:1.0, w_d:0.0001 => Score:-0.132163
[26/128]	Width:128, lr:1.0, w_d:0.001 => Score:-0.094499
[27/128]	Width:128, lr:1.0, w_d:0.01 => Score:-0.142896
[28/128]	Width:128, lr:1.0, w_d:0.1 => Score:-0.134817
[29/128]	Width:128, lr:1.0, w_d:1.0 => Score:-0.134839
[30/128]	Width:128, lr:1.0, w_d:10.0 => Score:-0.134973
[31/128]	Width:128, lr:1.0, w_d:100.0 => Score:-0.134492
[32/128]	Width:128, lr:1.0, w_d:0.0 => Score:-0.157271
[33/128]	Width:256, lr:0.001, w_d:0.0001 => Score:-0.147222
[34/128]	Width:256, lr:0.001, w_d:0.001 => Score:-0.147201
[35/128]	Width:256, lr:0.001, w_d:0.01 => Score:-0.147036
[36/128]	Width:256, lr:0.001, w_d:0.1 => Score:-0.146115
[37/128]	Width:256, lr:0.001, w_d:1.0 => Score:-0.144570
[38/128]	Width:256, lr:0.001, w_d:10.0 => Score:-0.142386
[39/128]	Width:256, lr:0.001, w_d:100.0 => Score:-0.142075
[40/128]	Width:256, lr:0.001, w_d:0.0 => Score:-0.147222
[41/128]	Width:256, lr:0.01, w_d:0.0001 => Score:-0.142130
[42/128]	Width:256, lr:0.01, w_d:0.001 => Score:-0.142108
[43/128]	Width:256, lr:0.01, w_d:0.01 => Score:-0.142151
[44/128]	Width:256, lr:0.01, w_d:0.1 => Score:-0.140080
[45/128]	Width:256, lr:0.01, w_d:1.0 => Score:-0.140818
[46/128]	Width:256, lr:0.01, w_d:10.0 => Score:-0.141959
[47/128]	Width:256, lr:0.01, w_d:100.0 => Score:-0.142192
[48/128]	Width:256, lr:0.01, w_d:0.0 => Score:-0.142152
[49/128]	Width:256, lr:0.1, w_d:0.0001 => Score:-0.114341
[50/128]	Width:256, lr:0.1, w_d:0.001 => Score:-0.118906
[51/128]	Width:256, lr:0.1, w_d:0.01 => Score:-0.147018
[52/128]	Width:256, lr:0.1, w_d:0.1 => Score:-0.142203
[53/128]	Width:256, lr:0.1, w_d:1.0 => Score:-0.142189
[54/128]	Width:256, lr:0.1, w_d:10.0 => Score:-0.142176
[55/128]	Width:256, lr:0.1, w_d:100.0 => Score:-0.142204
[56/128]	Width:256, lr:0.1, w_d:0.0 => Score:-0.114105
[57/128]	Width:256, lr:1.0, w_d:0.0001 => Score:-0.146194
[58/128]	Width:256, lr:1.0, w_d:0.001 => Score:-0.110468
[59/128]	Width:256, lr:1.0, w_d:0.01 => Score:-0.156933
[60/128]	Width:256, lr:1.0, w_d:0.1 => Score:-0.142109
[61/128]	Width:256, lr:1.0, w_d:1.0 => Score:-0.142137
[62/128]	Width:256, lr:1.0, w_d:10.0 => Score:-0.141924
[63/128]	Width:256, lr:1.0, w_d:100.0 => Score:-0.142900
[64/128]	Width:256, lr:1.0, w_d:0.0 => Score:-0.161304
[65/128]	Width:512, lr:0.001, w_d:0.0001 => Score:-0.132373
[66/128]	Width:512, lr:0.001, w_d:0.001 => Score:-0.132377
[67/128]	Width:512, lr:0.001, w_d:0.01 => Score:-0.132435
[68/128]	Width:512, lr:0.001, w_d:0.1 => Score:-0.132023
[69/128]	Width:512, lr:0.001, w_d:1.0 => Score:-0.132088
[70/128]	Width:512, lr:0.001, w_d:10.0 => Score:-0.133739
[71/128]	Width:512, lr:0.001, w_d:100.0 => Score:-0.134723
[72/128]	Width:512, lr:0.001, w_d:0.0 => Score:-0.132369
[73/128]	Width:512, lr:0.01, w_d:0.0001 => Score:-0.131133
[74/128]	Width:512, lr:0.01, w_d:0.001 => Score:-0.131122
[75/128]	Width:512, lr:0.01, w_d:0.01 => Score:-0.131880
[76/128]	Width:512, lr:0.01, w_d:0.1 => Score:-0.130578
[77/128]	Width:512, lr:0.01, w_d:1.0 => Score:-0.131987
[78/128]	Width:512, lr:0.01, w_d:10.0 => Score:-0.134424
[79/128]	Width:512, lr:0.01, w_d:100.0 => Score:-0.134895
[80/128]	Width:512, lr:0.01, w_d:0.0 => Score:-0.131052
[81/128]	Width:512, lr:0.1, w_d:0.0001 => Score:-0.110556
[82/128]	Width:512, lr:0.1, w_d:0.001 => Score:-0.102918
[83/128]	Width:512, lr:0.1, w_d:0.01 => Score:-0.148797
[84/128]	Width:512, lr:0.1, w_d:0.1 => Score:-0.135026
[85/128]	Width:512, lr:0.1, w_d:1.0 => Score:-0.135009
[86/128]	Width:512, lr:0.1, w_d:10.0 => Score:-0.134974
[87/128]	Width:512, lr:0.1, w_d:100.0 => Score:-0.134988
[88/128]	Width:512, lr:0.1, w_d:0.0 => Score:-0.109314
[89/128]	Width:512, lr:1.0, w_d:0.0001 => Score:-0.173907
[90/128]	Width:512, lr:1.0, w_d:0.001 => Score:-0.098770
[91/128]	Width:512, lr:1.0, w_d:0.01 => Score:-0.140052
[92/128]	Width:512, lr:1.0, w_d:0.1 => Score:-0.134855
[93/128]	Width:512, lr:1.0, w_d:1.0 => Score:-0.134865
[94/128]	Width:512, lr:1.0, w_d:10.0 => Score:-0.135384
[95/128]	Width:512, lr:1.0, w_d:100.0 => Score:-0.173593
[96/128]	Width:512, lr:1.0, w_d:0.0 => Score:-0.214170
[97/128]	Width:1024, lr:0.001, w_d:0.0001 => Score:-0.134061
[98/128]	Width:1024, lr:0.001, w_d:0.001 => Score:-0.134069
[99/128]	Width:1024, lr:0.001, w_d:0.01 => Score:-0.134199
[100/128]	Width:1024, lr:0.001, w_d:0.1 => Score:-0.134238
[101/128]	Width:1024, lr:0.001, w_d:1.0 => Score:-0.134816
[102/128]	Width:1024, lr:0.001, w_d:10.0 => Score:-0.134806
[103/128]	Width:1024, lr:0.001, w_d:100.0 => Score:-0.134351
[104/128]	Width:1024, lr:0.001, w_d:0.0 => Score:-0.134049
[105/128]	Width:1024, lr:0.01, w_d:0.0001 => Score:-0.126536
[106/128]	Width:1024, lr:0.01, w_d:0.001 => Score:-0.127074
[107/128]	Width:1024, lr:0.01, w_d:0.01 => Score:-0.132077
[108/128]	Width:1024, lr:0.01, w_d:0.1 => Score:-0.130246
[109/128]	Width:1024, lr:0.01, w_d:1.0 => Score:-0.131168
[110/128]	Width:1024, lr:0.01, w_d:10.0 => Score:-0.133906
[111/128]	Width:1024, lr:0.01, w_d:100.0 => Score:-0.134521
[112/128]	Width:1024, lr:0.01, w_d:0.0 => Score:-0.126408
[113/128]	Width:1024, lr:0.1, w_d:0.0001 => Score:-0.125418
[114/128]	Width:1024, lr:0.1, w_d:0.001 => Score:-0.105949
[115/128]	Width:1024, lr:0.1, w_d:0.01 => Score:-0.148049
[116/128]	Width:1024, lr:0.1, w_d:0.1 => Score:-0.134714
[117/128]	Width:1024, lr:0.1, w_d:1.0 => Score:-0.134694
[118/128]	Width:1024, lr:0.1, w_d:10.0 => Score:-0.134654
[119/128]	Width:1024, lr:0.1, w_d:100.0 => Score:-0.134729
[120/128]	Width:1024, lr:0.1, w_d:0.0 => Score:-0.122930
[121/128]	Width:1024, lr:1.0, w_d:0.0001 => Score:-0.237853
[122/128]	Width:1024, lr:1.0, w_d:0.001 => Score:-0.096550
[123/128]	Width:1024, lr:1.0, w_d:0.01 => Score:-0.144389
[124/128]	Width:1024, lr:1.0, w_d:0.1 => Score:-0.134493
[125/128]	Width:1024, lr:1.0, w_d:1.0 => Score:-0.134520
[126/128]	Width:1024, lr:1.0, w_d:10.0 => Score:-0.292431
[127/128]	Width:1024, lr:1.0, w_d:100.0 => Score:-0.313478
[128/128]	Width:1024, lr:1.0, w_d:0.0 => Score:-0.279193

Best validation score after 20 epochs: -0.094499. Best configuration:
Width:128, lr:1.0, w_d:0.001
preds_train_nn.shape == torch.Size([8000, 1]), preds_val_nn.shape == torch.Size([1000, 1]), preds_test_nn.shape == torch.Size([1000, 1])
score_train == -0.16867943108081818, score_val == -0.10285110026597977, score_test == -0.02729339711368084
Best params for NTK: {'C': 0.1}
Best score for NTK: -0.1685649063494755
Best params for RBF: {'C': 100.0, 'gamma': 'scale'}
Best score for RBF: -0.011200931784449773
Best kernel: rbf
preds_train_km.shape == (8000,), preds_val_km.shape == (1000,), preds_test_km.shape == (1000,)
score_train == 0.006599136568739499, score_val == 0.9831391987435136, score_test == 0.006418743308196393
