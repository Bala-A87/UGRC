X.shape == torch.Size([10000, 100])
scale_factor == 0.004732361529022455
Y.shape == torch.Size([10000, 1])
X_train.shape == torch.Size([8000, 100]), Y_train.shape == torch.Size([8000, 1])
X_val.shape == torch.Size([1000, 100]), Y_val.shape == torch.Size([1000, 1])
X_test.shape == torch.Size([1000, 100]), Y_test.shape == torch.Size([1000, 1])
Cross-validating across 128 models.
[1/128]	Width:128, lr:0.001, w_d:0.0001 => Score:-0.010407
[2/128]	Width:128, lr:0.001, w_d:0.001 => Score:-0.010407
[3/128]	Width:128, lr:0.001, w_d:0.01 => Score:-0.010406
[4/128]	Width:128, lr:0.001, w_d:0.1 => Score:-0.010397
[5/128]	Width:128, lr:0.001, w_d:1.0 => Score:-0.010843
[6/128]	Width:128, lr:0.001, w_d:10.0 => Score:-0.010964
[7/128]	Width:128, lr:0.001, w_d:100.0 => Score:-0.010977
[8/128]	Width:128, lr:0.001, w_d:0.0 => Score:-0.010407
[9/128]	Width:128, lr:0.01, w_d:0.0001 => Score:-0.010408
[10/128]	Width:128, lr:0.01, w_d:0.001 => Score:-0.010408
[11/128]	Width:128, lr:0.01, w_d:0.01 => Score:-0.010407
[12/128]	Width:128, lr:0.01, w_d:0.1 => Score:-0.010397
[13/128]	Width:128, lr:0.01, w_d:1.0 => Score:-0.010409
[14/128]	Width:128, lr:0.01, w_d:10.0 => Score:-0.010409
[15/128]	Width:128, lr:0.01, w_d:100.0 => Score:-0.010409
[16/128]	Width:128, lr:0.01, w_d:0.0 => Score:-0.010408
[17/128]	Width:128, lr:0.1, w_d:0.0001 => Score:-0.010451
[18/128]	Width:128, lr:0.1, w_d:0.001 => Score:-0.010447
[19/128]	Width:128, lr:0.1, w_d:0.01 => Score:-0.010420
[20/128]	Width:128, lr:0.1, w_d:0.1 => Score:-0.010415
[21/128]	Width:128, lr:0.1, w_d:1.0 => Score:-0.010415
[22/128]	Width:128, lr:0.1, w_d:10.0 => Score:-0.010414
[23/128]	Width:128, lr:0.1, w_d:100.0 => Score:-0.010413
[24/128]	Width:128, lr:0.1, w_d:0.0 => Score:-0.010449
[25/128]	Width:128, lr:1.0, w_d:0.0001 => Score:-0.010507
[26/128]	Width:128, lr:1.0, w_d:0.001 => Score:-0.010516
[27/128]	Width:128, lr:1.0, w_d:0.01 => Score:-0.010490
[28/128]	Width:128, lr:1.0, w_d:0.1 => Score:-0.010515
[29/128]	Width:128, lr:1.0, w_d:1.0 => Score:-0.010517
[30/128]	Width:128, lr:1.0, w_d:10.0 => Score:-0.010489
[31/128]	Width:128, lr:1.0, w_d:100.0 => Score:-0.010530
[32/128]	Width:128, lr:1.0, w_d:0.0 => Score:-0.010532
[33/128]	Width:256, lr:0.001, w_d:0.0001 => Score:-0.010392
[34/128]	Width:256, lr:0.001, w_d:0.001 => Score:-0.010392
[35/128]	Width:256, lr:0.001, w_d:0.01 => Score:-0.010393
[36/128]	Width:256, lr:0.001, w_d:0.1 => Score:-0.010397
[37/128]	Width:256, lr:0.001, w_d:1.0 => Score:-0.010460
[38/128]	Width:256, lr:0.001, w_d:10.0 => Score:-0.010425
[39/128]	Width:256, lr:0.001, w_d:100.0 => Score:-0.010407
[40/128]	Width:256, lr:0.001, w_d:0.0 => Score:-0.010392
[41/128]	Width:256, lr:0.01, w_d:0.0001 => Score:-0.010402
[42/128]	Width:256, lr:0.01, w_d:0.001 => Score:-0.010402
[43/128]	Width:256, lr:0.01, w_d:0.01 => Score:-0.010407
[44/128]	Width:256, lr:0.01, w_d:0.1 => Score:-0.010406
[45/128]	Width:256, lr:0.01, w_d:1.0 => Score:-0.010416
[46/128]	Width:256, lr:0.01, w_d:10.0 => Score:-0.010415
[47/128]	Width:256, lr:0.01, w_d:100.0 => Score:-0.010415
[48/128]	Width:256, lr:0.01, w_d:0.0 => Score:-0.010402
[49/128]	Width:256, lr:0.1, w_d:0.0001 => Score:-0.010413
[50/128]	Width:256, lr:0.1, w_d:0.001 => Score:-0.010413
[51/128]	Width:256, lr:0.1, w_d:0.01 => Score:-0.010423
[52/128]	Width:256, lr:0.1, w_d:0.1 => Score:-0.010423
[53/128]	Width:256, lr:0.1, w_d:1.0 => Score:-0.010423
[54/128]	Width:256, lr:0.1, w_d:10.0 => Score:-0.010421
[55/128]	Width:256, lr:0.1, w_d:100.0 => Score:-0.010414
[56/128]	Width:256, lr:0.1, w_d:0.0 => Score:-0.010412
[57/128]	Width:256, lr:1.0, w_d:0.0001 => Score:-0.010432
[58/128]	Width:256, lr:1.0, w_d:0.001 => Score:-0.010431
[59/128]	Width:256, lr:1.0, w_d:0.01 => Score:-0.010432
[60/128]	Width:256, lr:1.0, w_d:0.1 => Score:-0.010429
[61/128]	Width:256, lr:1.0, w_d:1.0 => Score:-0.010424
[62/128]	Width:256, lr:1.0, w_d:10.0 => Score:-0.010596
[63/128]	Width:256, lr:1.0, w_d:100.0 => Score:-0.011199
[64/128]	Width:256, lr:1.0, w_d:0.0 => Score:-0.010438
[65/128]	Width:512, lr:0.001, w_d:0.0001 => Score:-0.010398
[66/128]	Width:512, lr:0.001, w_d:0.001 => Score:-0.010398
[67/128]	Width:512, lr:0.001, w_d:0.01 => Score:-0.010398
[68/128]	Width:512, lr:0.001, w_d:0.1 => Score:-0.010403
[69/128]	Width:512, lr:0.001, w_d:1.0 => Score:-0.010424
[70/128]	Width:512, lr:0.001, w_d:10.0 => Score:-0.010412
[71/128]	Width:512, lr:0.001, w_d:100.0 => Score:-0.010408
[72/128]	Width:512, lr:0.001, w_d:0.0 => Score:-0.010398
[73/128]	Width:512, lr:0.01, w_d:0.0001 => Score:-0.010401
[74/128]	Width:512, lr:0.01, w_d:0.001 => Score:-0.010401
[75/128]	Width:512, lr:0.01, w_d:0.01 => Score:-0.010404
[76/128]	Width:512, lr:0.01, w_d:0.1 => Score:-0.010412
[77/128]	Width:512, lr:0.01, w_d:1.0 => Score:-0.010409
[78/128]	Width:512, lr:0.01, w_d:10.0 => Score:-0.010409
[79/128]	Width:512, lr:0.01, w_d:100.0 => Score:-0.010409
[80/128]	Width:512, lr:0.01, w_d:0.0 => Score:-0.010401
[81/128]	Width:512, lr:0.1, w_d:0.0001 => Score:-0.010409
[82/128]	Width:512, lr:0.1, w_d:0.001 => Score:-0.010397
[83/128]	Width:512, lr:0.1, w_d:0.01 => Score:-0.010410
[84/128]	Width:512, lr:0.1, w_d:0.1 => Score:-0.010410
[85/128]	Width:512, lr:0.1, w_d:1.0 => Score:-0.010410
[86/128]	Width:512, lr:0.1, w_d:10.0 => Score:-0.010409
[87/128]	Width:512, lr:0.1, w_d:100.0 => Score:-0.010408
[88/128]	Width:512, lr:0.1, w_d:0.0 => Score:-0.010412
[89/128]	Width:512, lr:1.0, w_d:0.0001 => Score:-0.010405
[90/128]	Width:512, lr:1.0, w_d:0.001 => Score:-0.010401
[91/128]	Width:512, lr:1.0, w_d:0.01 => Score:-0.010402
[92/128]	Width:512, lr:1.0, w_d:0.1 => Score:-0.010401
[93/128]	Width:512, lr:1.0, w_d:1.0 => Score:-0.010399
[94/128]	Width:512, lr:1.0, w_d:10.0 => Score:-0.026685
[95/128]	Width:512, lr:1.0, w_d:100.0 => Score:-0.039175
[96/128]	Width:512, lr:1.0, w_d:0.0 => Score:-0.010409
[97/128]	Width:1024, lr:0.001, w_d:0.0001 => Score:-0.017904
[98/128]	Width:1024, lr:0.001, w_d:0.001 => Score:-0.017904
[99/128]	Width:1024, lr:0.001, w_d:0.01 => Score:-0.017904
[100/128]	Width:1024, lr:0.001, w_d:0.1 => Score:-0.017903
[101/128]	Width:1024, lr:0.001, w_d:1.0 => Score:-0.017912
[102/128]	Width:1024, lr:0.001, w_d:10.0 => Score:-0.017911
[103/128]	Width:1024, lr:0.001, w_d:100.0 => Score:-0.017900
[104/128]	Width:1024, lr:0.001, w_d:0.0 => Score:-0.017904
[105/128]	Width:1024, lr:0.01, w_d:0.0001 => Score:-0.017860
[106/128]	Width:1024, lr:0.01, w_d:0.001 => Score:-0.017862
[107/128]	Width:1024, lr:0.01, w_d:0.01 => Score:-0.017879
[108/128]	Width:1024, lr:0.01, w_d:0.1 => Score:-0.017902
[109/128]	Width:1024, lr:0.01, w_d:1.0 => Score:-0.017900
[110/128]	Width:1024, lr:0.01, w_d:10.0 => Score:-0.017900
[111/128]	Width:1024, lr:0.01, w_d:100.0 => Score:-0.017900
[112/128]	Width:1024, lr:0.01, w_d:0.0 => Score:-0.017860
[113/128]	Width:1024, lr:0.1, w_d:0.0001 => Score:-0.017845
[114/128]	Width:1024, lr:0.1, w_d:0.001 => Score:-0.017860
[115/128]	Width:1024, lr:0.1, w_d:0.01 => Score:-0.017899
[116/128]	Width:1024, lr:0.1, w_d:0.1 => Score:-0.017900
[117/128]	Width:1024, lr:0.1, w_d:1.0 => Score:-0.017900
[118/128]	Width:1024, lr:0.1, w_d:10.0 => Score:-0.017899
[119/128]	Width:1024, lr:0.1, w_d:100.0 => Score:-0.017915
[120/128]	Width:1024, lr:0.1, w_d:0.0 => Score:-0.017860
[121/128]	Width:1024, lr:1.0, w_d:0.0001 => Score:-0.017875
[122/128]	Width:1024, lr:1.0, w_d:0.001 => Score:-0.017898
[123/128]	Width:1024, lr:1.0, w_d:0.01 => Score:-0.017898
[124/128]	Width:1024, lr:1.0, w_d:0.1 => Score:-0.017898
[125/128]	Width:1024, lr:1.0, w_d:1.0 => Score:-0.017898
[126/128]	Width:1024, lr:1.0, w_d:10.0 => Score:-0.071359
[127/128]	Width:1024, lr:1.0, w_d:100.0 => Score:-0.050139
[128/128]	Width:1024, lr:1.0, w_d:0.0 => Score:-0.017840

Best validation score after 20 epochs: -0.010392. Best configuration:
Width:256, lr:0.001, w_d:0.0001
preds_train_nn.shape == torch.Size([8000, 1]), preds_val_nn.shape == torch.Size([1000, 1]), preds_test_nn.shape == torch.Size([1000, 1])
score_train == -1.8521628379821777, score_val == -0.01061561331152916, score_test == -0.011106602847576141
Best params for NTK: {'C': 0.1}
Best score for NTK: -1.8522283618405881
Best params for RBF: {'C': 100.0, 'gamma': 'scale'}
Best score for RBF: -1.3287408329201664
Best kernel: rbf
preds_train_km.shape == (8000,), preds_val_km.shape == (1000,), preds_test_km.shape == (1000,)
score_train == 0.006449708638782409, score_val == 0.04268556515621256, score_test == 0.10712974101645178
