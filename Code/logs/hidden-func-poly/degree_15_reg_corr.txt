X.shape == torch.Size([10000, 100])
scale_factor == 0.004732361529022455
Y.shape == torch.Size([10000, 1])
X_train.shape == torch.Size([8000, 100]), Y_train.shape == torch.Size([8000, 1])
X_val.shape == torch.Size([1000, 100]), Y_val.shape == torch.Size([1000, 1])
X_test.shape == torch.Size([1000, 100]), Y_test.shape == torch.Size([1000, 1])
Cross-validating across 128 models.
[1/128]	Width:128, lr:0.001, w_d:0.0001 => Score:-0.007518
[2/128]	Width:128, lr:0.001, w_d:0.001 => Score:-0.007518
[3/128]	Width:128, lr:0.001, w_d:0.01 => Score:-0.007518
[4/128]	Width:128, lr:0.001, w_d:0.1 => Score:-0.007528
[5/128]	Width:128, lr:0.001, w_d:1.0 => Score:-0.008878
[6/128]	Width:128, lr:0.001, w_d:10.0 => Score:-0.008786
[7/128]	Width:128, lr:0.001, w_d:100.0 => Score:-0.008283
[8/128]	Width:128, lr:0.001, w_d:0.0 => Score:-0.007518
[9/128]	Width:128, lr:0.01, w_d:0.0001 => Score:-0.007525
[10/128]	Width:128, lr:0.01, w_d:0.001 => Score:-0.007524
[11/128]	Width:128, lr:0.01, w_d:0.01 => Score:-0.007521
[12/128]	Width:128, lr:0.01, w_d:0.1 => Score:-0.007524
[13/128]	Width:128, lr:0.01, w_d:1.0 => Score:-0.007519
[14/128]	Width:128, lr:0.01, w_d:10.0 => Score:-0.007516
[15/128]	Width:128, lr:0.01, w_d:100.0 => Score:-0.007514
[16/128]	Width:128, lr:0.01, w_d:0.0 => Score:-0.007524
[17/128]	Width:128, lr:0.1, w_d:0.0001 => Score:-0.007526
[18/128]	Width:128, lr:0.1, w_d:0.001 => Score:-0.007520
[19/128]	Width:128, lr:0.1, w_d:0.01 => Score:-0.007513
[20/128]	Width:128, lr:0.1, w_d:0.1 => Score:-0.007519
[21/128]	Width:128, lr:0.1, w_d:1.0 => Score:-0.007517
[22/128]	Width:128, lr:0.1, w_d:10.0 => Score:-0.007513
[23/128]	Width:128, lr:0.1, w_d:100.0 => Score:-0.007513
[24/128]	Width:128, lr:0.1, w_d:0.0 => Score:-0.007528
[25/128]	Width:128, lr:1.0, w_d:0.0001 => Score:-0.007558
[26/128]	Width:128, lr:1.0, w_d:0.001 => Score:-0.007554
[27/128]	Width:128, lr:1.0, w_d:0.01 => Score:-0.007556
[28/128]	Width:128, lr:1.0, w_d:0.1 => Score:-0.007553
[29/128]	Width:128, lr:1.0, w_d:1.0 => Score:-0.007554
[30/128]	Width:128, lr:1.0, w_d:10.0 => Score:-0.007702
[31/128]	Width:128, lr:1.0, w_d:100.0 => Score:-0.007636
[32/128]	Width:128, lr:1.0, w_d:0.0 => Score:-0.007552
[33/128]	Width:256, lr:0.001, w_d:0.0001 => Score:-0.007600
[34/128]	Width:256, lr:0.001, w_d:0.001 => Score:-0.007600
[35/128]	Width:256, lr:0.001, w_d:0.01 => Score:-0.007599
[36/128]	Width:256, lr:0.001, w_d:0.1 => Score:-0.007590
[37/128]	Width:256, lr:0.001, w_d:1.0 => Score:-0.007761
[38/128]	Width:256, lr:0.001, w_d:10.0 => Score:-0.007700
[39/128]	Width:256, lr:0.001, w_d:100.0 => Score:-0.007586
[40/128]	Width:256, lr:0.001, w_d:0.0 => Score:-0.007600
[41/128]	Width:256, lr:0.01, w_d:0.0001 => Score:-0.007603
[42/128]	Width:256, lr:0.01, w_d:0.001 => Score:-0.007602
[43/128]	Width:256, lr:0.01, w_d:0.01 => Score:-0.007597
[44/128]	Width:256, lr:0.01, w_d:0.1 => Score:-0.007587
[45/128]	Width:256, lr:0.01, w_d:1.0 => Score:-0.007598
[46/128]	Width:256, lr:0.01, w_d:10.0 => Score:-0.007593
[47/128]	Width:256, lr:0.01, w_d:100.0 => Score:-0.007590
[48/128]	Width:256, lr:0.01, w_d:0.0 => Score:-0.007603
[49/128]	Width:256, lr:0.1, w_d:0.0001 => Score:-0.007628
[50/128]	Width:256, lr:0.1, w_d:0.001 => Score:-0.007621
[51/128]	Width:256, lr:0.1, w_d:0.01 => Score:-0.007602
[52/128]	Width:256, lr:0.1, w_d:0.1 => Score:-0.007602
[53/128]	Width:256, lr:0.1, w_d:1.0 => Score:-0.007600
[54/128]	Width:256, lr:0.1, w_d:10.0 => Score:-0.007596
[55/128]	Width:256, lr:0.1, w_d:100.0 => Score:-0.007591
[56/128]	Width:256, lr:0.1, w_d:0.0 => Score:-0.007632
[57/128]	Width:256, lr:1.0, w_d:0.0001 => Score:-0.007620
[58/128]	Width:256, lr:1.0, w_d:0.001 => Score:-0.007625
[59/128]	Width:256, lr:1.0, w_d:0.01 => Score:-0.007620
[60/128]	Width:256, lr:1.0, w_d:0.1 => Score:-0.007623
[61/128]	Width:256, lr:1.0, w_d:1.0 => Score:-0.007624
[62/128]	Width:256, lr:1.0, w_d:10.0 => Score:-0.007972
[63/128]	Width:256, lr:1.0, w_d:100.0 => Score:-0.012123
[64/128]	Width:256, lr:1.0, w_d:0.0 => Score:-0.007629
[65/128]	Width:512, lr:0.001, w_d:0.0001 => Score:-0.007548
[66/128]	Width:512, lr:0.001, w_d:0.001 => Score:-0.007547
[67/128]	Width:512, lr:0.001, w_d:0.01 => Score:-0.007547
[68/128]	Width:512, lr:0.001, w_d:0.1 => Score:-0.007543
[69/128]	Width:512, lr:0.001, w_d:1.0 => Score:-0.007549
[70/128]	Width:512, lr:0.001, w_d:10.0 => Score:-0.007539
[71/128]	Width:512, lr:0.001, w_d:100.0 => Score:-0.007534
[72/128]	Width:512, lr:0.001, w_d:0.0 => Score:-0.007547
[73/128]	Width:512, lr:0.01, w_d:0.0001 => Score:-0.007541
[74/128]	Width:512, lr:0.01, w_d:0.001 => Score:-0.007541
[75/128]	Width:512, lr:0.01, w_d:0.01 => Score:-0.007540
[76/128]	Width:512, lr:0.01, w_d:0.1 => Score:-0.007542
[77/128]	Width:512, lr:0.01, w_d:1.0 => Score:-0.007538
[78/128]	Width:512, lr:0.01, w_d:10.0 => Score:-0.007536
[79/128]	Width:512, lr:0.01, w_d:100.0 => Score:-0.007534
[80/128]	Width:512, lr:0.01, w_d:0.0 => Score:-0.007541
[81/128]	Width:512, lr:0.1, w_d:0.0001 => Score:-0.007567
[82/128]	Width:512, lr:0.1, w_d:0.001 => Score:-0.007562
[83/128]	Width:512, lr:0.1, w_d:0.01 => Score:-0.007541
[84/128]	Width:512, lr:0.1, w_d:0.1 => Score:-0.007541
[85/128]	Width:512, lr:0.1, w_d:1.0 => Score:-0.007539
[86/128]	Width:512, lr:0.1, w_d:10.0 => Score:-0.007536
[87/128]	Width:512, lr:0.1, w_d:100.0 => Score:-0.007534
[88/128]	Width:512, lr:0.1, w_d:0.0 => Score:-0.007571
[89/128]	Width:512, lr:1.0, w_d:0.0001 => Score:-0.007574
[90/128]	Width:512, lr:1.0, w_d:0.001 => Score:-0.007575
[91/128]	Width:512, lr:1.0, w_d:0.01 => Score:-0.007574
[92/128]	Width:512, lr:1.0, w_d:0.1 => Score:-0.007574
[93/128]	Width:512, lr:1.0, w_d:1.0 => Score:-0.007568
[94/128]	Width:512, lr:1.0, w_d:10.0 => Score:-0.047700
[95/128]	Width:512, lr:1.0, w_d:100.0 => Score:-0.067394
[96/128]	Width:512, lr:1.0, w_d:0.0 => Score:-0.007572
[97/128]	Width:1024, lr:0.001, w_d:0.0001 => Score:-0.007691
[98/128]	Width:1024, lr:0.001, w_d:0.001 => Score:-0.007691
[99/128]	Width:1024, lr:0.001, w_d:0.01 => Score:-0.007691
[100/128]	Width:1024, lr:0.001, w_d:0.1 => Score:-0.007693
[101/128]	Width:1024, lr:0.001, w_d:1.0 => Score:-0.007695
[102/128]	Width:1024, lr:0.001, w_d:10.0 => Score:-0.007697
[103/128]	Width:1024, lr:0.001, w_d:100.0 => Score:-0.007694
[104/128]	Width:1024, lr:0.001, w_d:0.0 => Score:-0.007691
[105/128]	Width:1024, lr:0.01, w_d:0.0001 => Score:-0.007737
[106/128]	Width:1024, lr:0.01, w_d:0.001 => Score:-0.007737
[107/128]	Width:1024, lr:0.01, w_d:0.01 => Score:-0.007724
[108/128]	Width:1024, lr:0.01, w_d:0.1 => Score:-0.007694
[109/128]	Width:1024, lr:0.01, w_d:1.0 => Score:-0.007698
[110/128]	Width:1024, lr:0.01, w_d:10.0 => Score:-0.007695
[111/128]	Width:1024, lr:0.01, w_d:100.0 => Score:-0.007694
[112/128]	Width:1024, lr:0.01, w_d:0.0 => Score:-0.007736
[113/128]	Width:1024, lr:0.1, w_d:0.0001 => Score:-0.007830
[114/128]	Width:1024, lr:0.1, w_d:0.001 => Score:-0.007813
[115/128]	Width:1024, lr:0.1, w_d:0.01 => Score:-0.007710
[116/128]	Width:1024, lr:0.1, w_d:0.1 => Score:-0.007710
[117/128]	Width:1024, lr:0.1, w_d:1.0 => Score:-0.007710
[118/128]	Width:1024, lr:0.1, w_d:10.0 => Score:-0.007701
[119/128]	Width:1024, lr:0.1, w_d:100.0 => Score:-0.007694
[120/128]	Width:1024, lr:0.1, w_d:0.0 => Score:-0.007845
[121/128]	Width:1024, lr:1.0, w_d:0.0001 => Score:-0.007784
[122/128]	Width:1024, lr:1.0, w_d:0.001 => Score:-0.007777
[123/128]	Width:1024, lr:1.0, w_d:0.01 => Score:-0.007776
[124/128]	Width:1024, lr:1.0, w_d:0.1 => Score:-0.007797
[125/128]	Width:1024, lr:1.0, w_d:1.0 => Score:-0.007774
[126/128]	Width:1024, lr:1.0, w_d:10.0 => Score:-0.098307
[127/128]	Width:1024, lr:1.0, w_d:100.0 => Score:-0.085763
[128/128]	Width:1024, lr:1.0, w_d:0.0 => Score:-0.007884

Best validation score after 20 epochs: -0.007513. Best configuration:
Width:128, lr:0.1, w_d:100.0
preds_train_nn.shape == torch.Size([8000, 1]), preds_val_nn.shape == torch.Size([1000, 1]), preds_test_nn.shape == torch.Size([1000, 1])
score_train == -0.6693301796913147, score_val == -0.0076439641416072845, score_test == -0.024890603497624397
Best params for NTK: {'C': 0.01}
Best score for NTK: -0.6693821245086921
Best params for RBF: {'C': 100.0, 'gamma': 'scale'}
Best score for RBF: -0.4610229591004871
Best kernel: rbf
preds_train_km.shape == (8000,), preds_val_km.shape == (1000,), preds_test_km.shape == (1000,)
score_train == 0.004703513433996779, score_val == 0.02322671212516516, score_test == 0.09954321826879661
