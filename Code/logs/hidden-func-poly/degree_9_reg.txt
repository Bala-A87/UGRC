X.shape == torch.Size([10000, 100])
scale_factor == 0.0473104864358902
Y.shape == torch.Size([10000, 1])
X_train.shape == torch.Size([8000, 100]), Y_train.shape == torch.Size([8000, 1])
X_val.shape == torch.Size([1000, 100]), Y_val.shape == torch.Size([1000, 1])
X_test.shape == torch.Size([1000, 100]), Y_test.shape == torch.Size([1000, 1])
Cross-validating across 128 models.
[1/128]	Width:128, lr:0.001, w_d:0.0001 => Score:-0.128083
[2/128]	Width:128, lr:0.001, w_d:0.001 => Score:-0.128084
[3/128]	Width:128, lr:0.001, w_d:0.01 => Score:-0.128115
[4/128]	Width:128, lr:0.001, w_d:0.1 => Score:-0.128682
[5/128]	Width:128, lr:0.001, w_d:1.0 => Score:-0.131067
[6/128]	Width:128, lr:0.001, w_d:10.0 => Score:-0.128418
[7/128]	Width:128, lr:0.001, w_d:100.0 => Score:-0.126293
[8/128]	Width:128, lr:0.001, w_d:0.0 => Score:-0.128083
[9/128]	Width:128, lr:0.01, w_d:0.0001 => Score:-0.125497
[10/128]	Width:128, lr:0.01, w_d:0.001 => Score:-0.125476
[11/128]	Width:128, lr:0.01, w_d:0.01 => Score:-0.125349
[12/128]	Width:128, lr:0.01, w_d:0.1 => Score:-0.126120
[13/128]	Width:128, lr:0.01, w_d:1.0 => Score:-0.125532
[14/128]	Width:128, lr:0.01, w_d:10.0 => Score:-0.125217
[15/128]	Width:128, lr:0.01, w_d:100.0 => Score:-0.125220
[16/128]	Width:128, lr:0.01, w_d:0.0 => Score:-0.125500
[17/128]	Width:128, lr:0.1, w_d:0.0001 => Score:-0.126926
[18/128]	Width:128, lr:0.1, w_d:0.001 => Score:-0.126199
[19/128]	Width:128, lr:0.1, w_d:0.01 => Score:-0.125238
[20/128]	Width:128, lr:0.1, w_d:0.1 => Score:-0.125208
[21/128]	Width:128, lr:0.1, w_d:1.0 => Score:-0.125211
[22/128]	Width:128, lr:0.1, w_d:10.0 => Score:-0.125220
[23/128]	Width:128, lr:0.1, w_d:100.0 => Score:-0.125220
[24/128]	Width:128, lr:0.1, w_d:0.0 => Score:-0.127024
[25/128]	Width:128, lr:1.0, w_d:0.0001 => Score:-0.149220
[26/128]	Width:128, lr:1.0, w_d:0.001 => Score:-0.130709
[27/128]	Width:128, lr:1.0, w_d:0.01 => Score:-0.125218
[28/128]	Width:128, lr:1.0, w_d:0.1 => Score:-0.125213
[29/128]	Width:128, lr:1.0, w_d:1.0 => Score:-0.125208
[30/128]	Width:128, lr:1.0, w_d:10.0 => Score:-0.125198
[31/128]	Width:128, lr:1.0, w_d:100.0 => Score:-0.125117
[32/128]	Width:128, lr:1.0, w_d:0.0 => Score:-0.159438
[33/128]	Width:256, lr:0.001, w_d:0.0001 => Score:-0.127937
[34/128]	Width:256, lr:0.001, w_d:0.001 => Score:-0.127935
[35/128]	Width:256, lr:0.001, w_d:0.01 => Score:-0.127935
[36/128]	Width:256, lr:0.001, w_d:0.1 => Score:-0.128088
[37/128]	Width:256, lr:0.001, w_d:1.0 => Score:-0.128770
[38/128]	Width:256, lr:0.001, w_d:10.0 => Score:-0.128057
[39/128]	Width:256, lr:0.001, w_d:100.0 => Score:-0.127401
[40/128]	Width:256, lr:0.001, w_d:0.0 => Score:-0.127937
[41/128]	Width:256, lr:0.01, w_d:0.0001 => Score:-0.127463
[42/128]	Width:256, lr:0.01, w_d:0.001 => Score:-0.127446
[43/128]	Width:256, lr:0.01, w_d:0.01 => Score:-0.127357
[44/128]	Width:256, lr:0.01, w_d:0.1 => Score:-0.127629
[45/128]	Width:256, lr:0.01, w_d:1.0 => Score:-0.127413
[46/128]	Width:256, lr:0.01, w_d:10.0 => Score:-0.127354
[47/128]	Width:256, lr:0.01, w_d:100.0 => Score:-0.127361
[48/128]	Width:256, lr:0.01, w_d:0.0 => Score:-0.127465
[49/128]	Width:256, lr:0.1, w_d:0.0001 => Score:-0.129993
[50/128]	Width:256, lr:0.1, w_d:0.001 => Score:-0.128842
[51/128]	Width:256, lr:0.1, w_d:0.01 => Score:-0.127354
[52/128]	Width:256, lr:0.1, w_d:0.1 => Score:-0.127326
[53/128]	Width:256, lr:0.1, w_d:1.0 => Score:-0.127339
[54/128]	Width:256, lr:0.1, w_d:10.0 => Score:-0.127352
[55/128]	Width:256, lr:0.1, w_d:100.0 => Score:-0.127363
[56/128]	Width:256, lr:0.1, w_d:0.0 => Score:-0.130129
[57/128]	Width:256, lr:1.0, w_d:0.0001 => Score:-0.162142
[58/128]	Width:256, lr:1.0, w_d:0.001 => Score:-0.131904
[59/128]	Width:256, lr:1.0, w_d:0.01 => Score:-0.127306
[60/128]	Width:256, lr:1.0, w_d:0.1 => Score:-0.127306
[61/128]	Width:256, lr:1.0, w_d:1.0 => Score:-0.127306
[62/128]	Width:256, lr:1.0, w_d:10.0 => Score:-0.127540
[63/128]	Width:256, lr:1.0, w_d:100.0 => Score:-0.128113
[64/128]	Width:256, lr:1.0, w_d:0.0 => Score:-0.166524
[65/128]	Width:512, lr:0.001, w_d:0.0001 => Score:-0.126045
[66/128]	Width:512, lr:0.001, w_d:0.001 => Score:-0.126044
[67/128]	Width:512, lr:0.001, w_d:0.01 => Score:-0.126031
[68/128]	Width:512, lr:0.001, w_d:0.1 => Score:-0.125971
[69/128]	Width:512, lr:0.001, w_d:1.0 => Score:-0.125942
[70/128]	Width:512, lr:0.001, w_d:10.0 => Score:-0.125925
[71/128]	Width:512, lr:0.001, w_d:100.0 => Score:-0.125926
[72/128]	Width:512, lr:0.001, w_d:0.0 => Score:-0.126045
[73/128]	Width:512, lr:0.01, w_d:0.0001 => Score:-0.126168
[74/128]	Width:512, lr:0.01, w_d:0.001 => Score:-0.126150
[75/128]	Width:512, lr:0.01, w_d:0.01 => Score:-0.126033
[76/128]	Width:512, lr:0.01, w_d:0.1 => Score:-0.125933
[77/128]	Width:512, lr:0.01, w_d:1.0 => Score:-0.125925
[78/128]	Width:512, lr:0.01, w_d:10.0 => Score:-0.125924
[79/128]	Width:512, lr:0.01, w_d:100.0 => Score:-0.125926
[80/128]	Width:512, lr:0.01, w_d:0.0 => Score:-0.126170
[81/128]	Width:512, lr:0.1, w_d:0.0001 => Score:-0.129850
[82/128]	Width:512, lr:0.1, w_d:0.001 => Score:-0.128414
[83/128]	Width:512, lr:0.1, w_d:0.01 => Score:-0.125932
[84/128]	Width:512, lr:0.1, w_d:0.1 => Score:-0.125926
[85/128]	Width:512, lr:0.1, w_d:1.0 => Score:-0.125923
[86/128]	Width:512, lr:0.1, w_d:10.0 => Score:-0.125926
[87/128]	Width:512, lr:0.1, w_d:100.0 => Score:-0.125927
[88/128]	Width:512, lr:0.1, w_d:0.0 => Score:-0.130015
[89/128]	Width:512, lr:1.0, w_d:0.0001 => Score:-0.163166
[90/128]	Width:512, lr:1.0, w_d:0.001 => Score:-0.131546
[91/128]	Width:512, lr:1.0, w_d:0.01 => Score:-0.125936
[92/128]	Width:512, lr:1.0, w_d:0.1 => Score:-0.125935
[93/128]	Width:512, lr:1.0, w_d:1.0 => Score:-0.125933
[94/128]	Width:512, lr:1.0, w_d:10.0 => Score:-0.128295
[95/128]	Width:512, lr:1.0, w_d:100.0 => Score:-0.147074
[96/128]	Width:512, lr:1.0, w_d:0.0 => Score:-0.172554
[97/128]	Width:1024, lr:0.001, w_d:0.0001 => Score:-0.133996
[98/128]	Width:1024, lr:0.001, w_d:0.001 => Score:-0.133994
[99/128]	Width:1024, lr:0.001, w_d:0.01 => Score:-0.133981
[100/128]	Width:1024, lr:0.001, w_d:0.1 => Score:-0.133889
[101/128]	Width:1024, lr:0.001, w_d:1.0 => Score:-0.133837
[102/128]	Width:1024, lr:0.001, w_d:10.0 => Score:-0.133828
[103/128]	Width:1024, lr:0.001, w_d:100.0 => Score:-0.133819
[104/128]	Width:1024, lr:0.001, w_d:0.0 => Score:-0.133996
[105/128]	Width:1024, lr:0.01, w_d:0.0001 => Score:-0.134261
[106/128]	Width:1024, lr:0.01, w_d:0.001 => Score:-0.134238
[107/128]	Width:1024, lr:0.01, w_d:0.01 => Score:-0.134032
[108/128]	Width:1024, lr:0.01, w_d:0.1 => Score:-0.133822
[109/128]	Width:1024, lr:0.01, w_d:1.0 => Score:-0.133820
[110/128]	Width:1024, lr:0.01, w_d:10.0 => Score:-0.133820
[111/128]	Width:1024, lr:0.01, w_d:100.0 => Score:-0.133819
[112/128]	Width:1024, lr:0.01, w_d:0.0 => Score:-0.134266
[113/128]	Width:1024, lr:0.1, w_d:0.0001 => Score:-0.140001
[114/128]	Width:1024, lr:0.1, w_d:0.001 => Score:-0.137863
[115/128]	Width:1024, lr:0.1, w_d:0.01 => Score:-0.133831
[116/128]	Width:1024, lr:0.1, w_d:0.1 => Score:-0.133830
[117/128]	Width:1024, lr:0.1, w_d:1.0 => Score:-0.133825
[118/128]	Width:1024, lr:0.1, w_d:10.0 => Score:-0.133820
[119/128]	Width:1024, lr:0.1, w_d:100.0 => Score:-0.133811
[120/128]	Width:1024, lr:0.1, w_d:0.0 => Score:-0.140072
[121/128]	Width:1024, lr:1.0, w_d:0.0001 => Score:-0.170301
[122/128]	Width:1024, lr:1.0, w_d:0.001 => Score:-0.142584
[123/128]	Width:1024, lr:1.0, w_d:0.01 => Score:-0.133873
[124/128]	Width:1024, lr:1.0, w_d:0.1 => Score:-0.133878
[125/128]	Width:1024, lr:1.0, w_d:1.0 => Score:-0.133878
[126/128]	Width:1024, lr:1.0, w_d:10.0 => Score:-0.141091
[127/128]	Width:1024, lr:1.0, w_d:100.0 => Score:-0.145835
[128/128]	Width:1024, lr:1.0, w_d:0.0 => Score:-0.174973

Best validation score after 20 epochs: -0.125117. Best configuration:
Width:128, lr:1.0, w_d:100.0
preds_train_nn.shape == torch.Size([8000, 1]), preds_val_nn.shape == torch.Size([1000, 1]), preds_test_nn.shape == torch.Size([1000, 1])
score_train == -0.15731635689735413, score_val == -0.14082233607769012, score_test == -0.13391008973121643
Best params for NTK: {'C': 0.01}
Best score for NTK: -0.14272801062811832
Best params for RBF: {'C': 0.01, 'gamma': 10.0}
Best score for RBF: -0.14277513057178437
Best kernel: ntk
preds_train_km.shape == (8000,), preds_val_km.shape == (1000,), preds_test_km.shape == (1000,)
score_train == 0.1420873077219592, score_val == 0.12731382785660586, score_test == 0.11747464414777076
