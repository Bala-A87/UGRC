X.shape == torch.Size([10000, 100])
scale_factor == 0.004732361529022455
Y.shape == torch.Size([10000, 1])
X_train.shape == torch.Size([8000, 100]), Y_train.shape == torch.Size([8000, 1])
X_val.shape == torch.Size([1000, 100]), Y_val.shape == torch.Size([1000, 1])
X_test.shape == torch.Size([1000, 100]), Y_test.shape == torch.Size([1000, 1])
Cross-validating across 128 models.
[1/128]	Width:128, lr:0.001, w_d:0.0001 => Score:-0.015927
[2/128]	Width:128, lr:0.001, w_d:0.001 => Score:-0.015928
[3/128]	Width:128, lr:0.001, w_d:0.01 => Score:-0.015932
[4/128]	Width:128, lr:0.001, w_d:0.1 => Score:-0.016031
[5/128]	Width:128, lr:0.001, w_d:1.0 => Score:-0.018173
[6/128]	Width:128, lr:0.001, w_d:10.0 => Score:-0.017702
[7/128]	Width:128, lr:0.001, w_d:100.0 => Score:-0.016746
[8/128]	Width:128, lr:0.001, w_d:0.0 => Score:-0.015927
[9/128]	Width:128, lr:0.01, w_d:0.0001 => Score:-0.015886
[10/128]	Width:128, lr:0.01, w_d:0.001 => Score:-0.015885
[11/128]	Width:128, lr:0.01, w_d:0.01 => Score:-0.015884
[12/128]	Width:128, lr:0.01, w_d:0.1 => Score:-0.015962
[13/128]	Width:128, lr:0.01, w_d:1.0 => Score:-0.015886
[14/128]	Width:128, lr:0.01, w_d:10.0 => Score:-0.015886
[15/128]	Width:128, lr:0.01, w_d:100.0 => Score:-0.015886
[16/128]	Width:128, lr:0.01, w_d:0.0 => Score:-0.015886
[17/128]	Width:128, lr:0.1, w_d:0.0001 => Score:-0.015907
[18/128]	Width:128, lr:0.1, w_d:0.001 => Score:-0.015907
[19/128]	Width:128, lr:0.1, w_d:0.01 => Score:-0.015897
[20/128]	Width:128, lr:0.1, w_d:0.1 => Score:-0.015886
[21/128]	Width:128, lr:0.1, w_d:1.0 => Score:-0.015886
[22/128]	Width:128, lr:0.1, w_d:10.0 => Score:-0.015887
[23/128]	Width:128, lr:0.1, w_d:100.0 => Score:-0.015886
[24/128]	Width:128, lr:0.1, w_d:0.0 => Score:-0.015911
[25/128]	Width:128, lr:1.0, w_d:0.0001 => Score:-0.015891
[26/128]	Width:128, lr:1.0, w_d:0.001 => Score:-0.015889
[27/128]	Width:128, lr:1.0, w_d:0.01 => Score:-0.015890
[28/128]	Width:128, lr:1.0, w_d:0.1 => Score:-0.015889
[29/128]	Width:128, lr:1.0, w_d:1.0 => Score:-0.015890
[30/128]	Width:128, lr:1.0, w_d:10.0 => Score:-0.015955
[31/128]	Width:128, lr:1.0, w_d:100.0 => Score:-0.016612
[32/128]	Width:128, lr:1.0, w_d:0.0 => Score:-0.015893
[33/128]	Width:256, lr:0.001, w_d:0.0001 => Score:-0.015825
[34/128]	Width:256, lr:0.001, w_d:0.001 => Score:-0.015825
[35/128]	Width:256, lr:0.001, w_d:0.01 => Score:-0.015826
[36/128]	Width:256, lr:0.001, w_d:0.1 => Score:-0.015838
[37/128]	Width:256, lr:0.001, w_d:1.0 => Score:-0.016213
[38/128]	Width:256, lr:0.001, w_d:10.0 => Score:-0.016070
[39/128]	Width:256, lr:0.001, w_d:100.0 => Score:-0.015845
[40/128]	Width:256, lr:0.001, w_d:0.0 => Score:-0.015825
[41/128]	Width:256, lr:0.01, w_d:0.0001 => Score:-0.015834
[42/128]	Width:256, lr:0.01, w_d:0.001 => Score:-0.015835
[43/128]	Width:256, lr:0.01, w_d:0.01 => Score:-0.015837
[44/128]	Width:256, lr:0.01, w_d:0.1 => Score:-0.015868
[45/128]	Width:256, lr:0.01, w_d:1.0 => Score:-0.015839
[46/128]	Width:256, lr:0.01, w_d:10.0 => Score:-0.015839
[47/128]	Width:256, lr:0.01, w_d:100.0 => Score:-0.015839
[48/128]	Width:256, lr:0.01, w_d:0.0 => Score:-0.015834
[49/128]	Width:256, lr:0.1, w_d:0.0001 => Score:-0.015894
[50/128]	Width:256, lr:0.1, w_d:0.001 => Score:-0.015891
[51/128]	Width:256, lr:0.1, w_d:0.01 => Score:-0.015843
[52/128]	Width:256, lr:0.1, w_d:0.1 => Score:-0.015842
[53/128]	Width:256, lr:0.1, w_d:1.0 => Score:-0.015842
[54/128]	Width:256, lr:0.1, w_d:10.0 => Score:-0.015841
[55/128]	Width:256, lr:0.1, w_d:100.0 => Score:-0.015840
[56/128]	Width:256, lr:0.1, w_d:0.0 => Score:-0.015897
[57/128]	Width:256, lr:1.0, w_d:0.0001 => Score:-0.015888
[58/128]	Width:256, lr:1.0, w_d:0.001 => Score:-0.015884
[59/128]	Width:256, lr:1.0, w_d:0.01 => Score:-0.015884
[60/128]	Width:256, lr:1.0, w_d:0.1 => Score:-0.015892
[61/128]	Width:256, lr:1.0, w_d:1.0 => Score:-0.015865
[62/128]	Width:256, lr:1.0, w_d:10.0 => Score:-0.015974
[63/128]	Width:256, lr:1.0, w_d:100.0 => Score:-0.018849
[64/128]	Width:256, lr:1.0, w_d:0.0 => Score:-0.015886
[65/128]	Width:512, lr:0.001, w_d:0.0001 => Score:-0.015813
[66/128]	Width:512, lr:0.001, w_d:0.001 => Score:-0.015813
[67/128]	Width:512, lr:0.001, w_d:0.01 => Score:-0.015815
[68/128]	Width:512, lr:0.001, w_d:0.1 => Score:-0.015831
[69/128]	Width:512, lr:0.001, w_d:1.0 => Score:-0.015862
[70/128]	Width:512, lr:0.001, w_d:10.0 => Score:-0.015853
[71/128]	Width:512, lr:0.001, w_d:100.0 => Score:-0.015847
[72/128]	Width:512, lr:0.001, w_d:0.0 => Score:-0.015813
[73/128]	Width:512, lr:0.01, w_d:0.0001 => Score:-0.015821
[74/128]	Width:512, lr:0.01, w_d:0.001 => Score:-0.015822
[75/128]	Width:512, lr:0.01, w_d:0.01 => Score:-0.015833
[76/128]	Width:512, lr:0.01, w_d:0.1 => Score:-0.015854
[77/128]	Width:512, lr:0.01, w_d:1.0 => Score:-0.015848
[78/128]	Width:512, lr:0.01, w_d:10.0 => Score:-0.015847
[79/128]	Width:512, lr:0.01, w_d:100.0 => Score:-0.015847
[80/128]	Width:512, lr:0.01, w_d:0.0 => Score:-0.015821
[81/128]	Width:512, lr:0.1, w_d:0.0001 => Score:-0.015852
[82/128]	Width:512, lr:0.1, w_d:0.001 => Score:-0.015853
[83/128]	Width:512, lr:0.1, w_d:0.01 => Score:-0.015848
[84/128]	Width:512, lr:0.1, w_d:0.1 => Score:-0.015848
[85/128]	Width:512, lr:0.1, w_d:1.0 => Score:-0.015848
[86/128]	Width:512, lr:0.1, w_d:10.0 => Score:-0.015847
[87/128]	Width:512, lr:0.1, w_d:100.0 => Score:-0.015846
[88/128]	Width:512, lr:0.1, w_d:0.0 => Score:-0.015850
[89/128]	Width:512, lr:1.0, w_d:0.0001 => Score:-0.015852
[90/128]	Width:512, lr:1.0, w_d:0.001 => Score:-0.015851
[91/128]	Width:512, lr:1.0, w_d:0.01 => Score:-0.015850
[92/128]	Width:512, lr:1.0, w_d:0.1 => Score:-0.015850
[93/128]	Width:512, lr:1.0, w_d:1.0 => Score:-0.015848
[94/128]	Width:512, lr:1.0, w_d:10.0 => Score:-0.040578
[95/128]	Width:512, lr:1.0, w_d:100.0 => Score:-0.038327
[96/128]	Width:512, lr:1.0, w_d:0.0 => Score:-0.015881
[97/128]	Width:1024, lr:0.001, w_d:0.0001 => Score:-0.017111
[98/128]	Width:1024, lr:0.001, w_d:0.001 => Score:-0.017111
[99/128]	Width:1024, lr:0.001, w_d:0.01 => Score:-0.017110
[100/128]	Width:1024, lr:0.001, w_d:0.1 => Score:-0.017105
[101/128]	Width:1024, lr:0.001, w_d:1.0 => Score:-0.017097
[102/128]	Width:1024, lr:0.001, w_d:10.0 => Score:-0.017097
[103/128]	Width:1024, lr:0.001, w_d:100.0 => Score:-0.017099
[104/128]	Width:1024, lr:0.001, w_d:0.0 => Score:-0.017111
[105/128]	Width:1024, lr:0.01, w_d:0.0001 => Score:-0.017114
[106/128]	Width:1024, lr:0.01, w_d:0.001 => Score:-0.017114
[107/128]	Width:1024, lr:0.01, w_d:0.01 => Score:-0.017112
[108/128]	Width:1024, lr:0.01, w_d:0.1 => Score:-0.017096
[109/128]	Width:1024, lr:0.01, w_d:1.0 => Score:-0.017101
[110/128]	Width:1024, lr:0.01, w_d:10.0 => Score:-0.017100
[111/128]	Width:1024, lr:0.01, w_d:100.0 => Score:-0.017099
[112/128]	Width:1024, lr:0.01, w_d:0.0 => Score:-0.017113
[113/128]	Width:1024, lr:0.1, w_d:0.0001 => Score:-0.017094
[114/128]	Width:1024, lr:0.1, w_d:0.001 => Score:-0.017098
[115/128]	Width:1024, lr:0.1, w_d:0.01 => Score:-0.017103
[116/128]	Width:1024, lr:0.1, w_d:0.1 => Score:-0.017103
[117/128]	Width:1024, lr:0.1, w_d:1.0 => Score:-0.017103
[118/128]	Width:1024, lr:0.1, w_d:10.0 => Score:-0.017101
[119/128]	Width:1024, lr:0.1, w_d:100.0 => Score:-0.017101
[120/128]	Width:1024, lr:0.1, w_d:0.0 => Score:-0.017087
[121/128]	Width:1024, lr:1.0, w_d:0.0001 => Score:-0.017106
[122/128]	Width:1024, lr:1.0, w_d:0.001 => Score:-0.017110
[123/128]	Width:1024, lr:1.0, w_d:0.01 => Score:-0.017109
[124/128]	Width:1024, lr:1.0, w_d:0.1 => Score:-0.017109
[125/128]	Width:1024, lr:1.0, w_d:1.0 => Score:-0.017103
[126/128]	Width:1024, lr:1.0, w_d:10.0 => Score:-0.106050
[127/128]	Width:1024, lr:1.0, w_d:100.0 => Score:-0.025860
[128/128]	Width:1024, lr:1.0, w_d:0.0 => Score:-0.017080

Best validation score after 20 epochs: -0.015813. Best configuration:
Width:512, lr:0.001, w_d:0.0
preds_train_nn.shape == torch.Size([8000, 1]), preds_val_nn.shape == torch.Size([1000, 1]), preds_test_nn.shape == torch.Size([1000, 1])
score_train == -0.4305514395236969, score_val == -0.01611299067735672, score_test == -0.03189908713102341
Best params for NTK: {'C': 0.001}
Best score for NTK: -0.43047779312381956
Best params for RBF: {'C': 100.0, 'gamma': 'scale'}
Best score for RBF: -0.3070497237826366
Best kernel: rbf
preds_train_km.shape == (8000,), preds_val_km.shape == (1000,), preds_test_km.shape == (1000,)
score_train == 0.005260616067234277, score_val == 0.028112267092277567, score_test == 0.09403405926403903
