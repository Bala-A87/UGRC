X.shape == torch.Size([10000, 100])
scale_factor == 0.004732361529022455
Y.shape == torch.Size([10000, 1])
X_train.shape == torch.Size([8000, 100]), Y_train.shape == torch.Size([8000, 1])
X_val.shape == torch.Size([1000, 100]), Y_val.shape == torch.Size([1000, 1])
X_test.shape == torch.Size([1000, 100]), Y_test.shape == torch.Size([1000, 1])
Cross-validating across 128 models.
[1/128]	Width:128, lr:0.001, w_d:0.0001 => Score:-0.013473
[2/128]	Width:128, lr:0.001, w_d:0.001 => Score:-0.013472
[3/128]	Width:128, lr:0.001, w_d:0.01 => Score:-0.013472
[4/128]	Width:128, lr:0.001, w_d:0.1 => Score:-0.013471
[5/128]	Width:128, lr:0.001, w_d:1.0 => Score:-0.013922
[6/128]	Width:128, lr:0.001, w_d:10.0 => Score:-0.014171
[7/128]	Width:128, lr:0.001, w_d:100.0 => Score:-0.014328
[8/128]	Width:128, lr:0.001, w_d:0.0 => Score:-0.013473
[9/128]	Width:128, lr:0.01, w_d:0.0001 => Score:-0.013468
[10/128]	Width:128, lr:0.01, w_d:0.001 => Score:-0.013468
[11/128]	Width:128, lr:0.01, w_d:0.01 => Score:-0.013460
[12/128]	Width:128, lr:0.01, w_d:0.1 => Score:-0.013469
[13/128]	Width:128, lr:0.01, w_d:1.0 => Score:-0.013451
[14/128]	Width:128, lr:0.01, w_d:10.0 => Score:-0.013452
[15/128]	Width:128, lr:0.01, w_d:100.0 => Score:-0.013454
[16/128]	Width:128, lr:0.01, w_d:0.0 => Score:-0.013468
[17/128]	Width:128, lr:0.1, w_d:0.0001 => Score:-0.013471
[18/128]	Width:128, lr:0.1, w_d:0.001 => Score:-0.013467
[19/128]	Width:128, lr:0.1, w_d:0.01 => Score:-0.013449
[20/128]	Width:128, lr:0.1, w_d:0.1 => Score:-0.013449
[21/128]	Width:128, lr:0.1, w_d:1.0 => Score:-0.013449
[22/128]	Width:128, lr:0.1, w_d:10.0 => Score:-0.013450
[23/128]	Width:128, lr:0.1, w_d:100.0 => Score:-0.013452
[24/128]	Width:128, lr:0.1, w_d:0.0 => Score:-0.013473
[25/128]	Width:128, lr:1.0, w_d:0.0001 => Score:-0.013480
[26/128]	Width:128, lr:1.0, w_d:0.001 => Score:-0.013480
[27/128]	Width:128, lr:1.0, w_d:0.01 => Score:-0.013478
[28/128]	Width:128, lr:1.0, w_d:0.1 => Score:-0.013484
[29/128]	Width:128, lr:1.0, w_d:1.0 => Score:-0.013478
[30/128]	Width:128, lr:1.0, w_d:10.0 => Score:-0.013484
[31/128]	Width:128, lr:1.0, w_d:100.0 => Score:-0.013498
[32/128]	Width:128, lr:1.0, w_d:0.0 => Score:-0.013475
[33/128]	Width:256, lr:0.001, w_d:0.0001 => Score:-0.013487
[34/128]	Width:256, lr:0.001, w_d:0.001 => Score:-0.013487
[35/128]	Width:256, lr:0.001, w_d:0.01 => Score:-0.013485
[36/128]	Width:256, lr:0.001, w_d:0.1 => Score:-0.013476
[37/128]	Width:256, lr:0.001, w_d:1.0 => Score:-0.013577
[38/128]	Width:256, lr:0.001, w_d:10.0 => Score:-0.013522
[39/128]	Width:256, lr:0.001, w_d:100.0 => Score:-0.013473
[40/128]	Width:256, lr:0.001, w_d:0.0 => Score:-0.013487
[41/128]	Width:256, lr:0.01, w_d:0.0001 => Score:-0.013471
[42/128]	Width:256, lr:0.01, w_d:0.001 => Score:-0.013471
[43/128]	Width:256, lr:0.01, w_d:0.01 => Score:-0.013466
[44/128]	Width:256, lr:0.01, w_d:0.1 => Score:-0.013471
[45/128]	Width:256, lr:0.01, w_d:1.0 => Score:-0.013462
[46/128]	Width:256, lr:0.01, w_d:10.0 => Score:-0.013463
[47/128]	Width:256, lr:0.01, w_d:100.0 => Score:-0.013465
[48/128]	Width:256, lr:0.01, w_d:0.0 => Score:-0.013471
[49/128]	Width:256, lr:0.1, w_d:0.0001 => Score:-0.013469
[50/128]	Width:256, lr:0.1, w_d:0.001 => Score:-0.013462
[51/128]	Width:256, lr:0.1, w_d:0.01 => Score:-0.013461
[52/128]	Width:256, lr:0.1, w_d:0.1 => Score:-0.013460
[53/128]	Width:256, lr:0.1, w_d:1.0 => Score:-0.013460
[54/128]	Width:256, lr:0.1, w_d:10.0 => Score:-0.013461
[55/128]	Width:256, lr:0.1, w_d:100.0 => Score:-0.013464
[56/128]	Width:256, lr:0.1, w_d:0.0 => Score:-0.013463
[57/128]	Width:256, lr:1.0, w_d:0.0001 => Score:-0.013480
[58/128]	Width:256, lr:1.0, w_d:0.001 => Score:-0.013481
[59/128]	Width:256, lr:1.0, w_d:0.01 => Score:-0.013481
[60/128]	Width:256, lr:1.0, w_d:0.1 => Score:-0.013477
[61/128]	Width:256, lr:1.0, w_d:1.0 => Score:-0.013489
[62/128]	Width:256, lr:1.0, w_d:10.0 => Score:-0.014593
[63/128]	Width:256, lr:1.0, w_d:100.0 => Score:-0.019282
[64/128]	Width:256, lr:1.0, w_d:0.0 => Score:-0.013475
[65/128]	Width:512, lr:0.001, w_d:0.0001 => Score:-0.013475
[66/128]	Width:512, lr:0.001, w_d:0.001 => Score:-0.013474
[67/128]	Width:512, lr:0.001, w_d:0.01 => Score:-0.013473
[68/128]	Width:512, lr:0.001, w_d:0.1 => Score:-0.013461
[69/128]	Width:512, lr:0.001, w_d:1.0 => Score:-0.013448
[70/128]	Width:512, lr:0.001, w_d:10.0 => Score:-0.013452
[71/128]	Width:512, lr:0.001, w_d:100.0 => Score:-0.013454
[72/128]	Width:512, lr:0.001, w_d:0.0 => Score:-0.013475
[73/128]	Width:512, lr:0.01, w_d:0.0001 => Score:-0.013467
[74/128]	Width:512, lr:0.01, w_d:0.001 => Score:-0.013467
[75/128]	Width:512, lr:0.01, w_d:0.01 => Score:-0.013458
[76/128]	Width:512, lr:0.01, w_d:0.1 => Score:-0.013449
[77/128]	Width:512, lr:0.01, w_d:1.0 => Score:-0.013450
[78/128]	Width:512, lr:0.01, w_d:10.0 => Score:-0.013451
[79/128]	Width:512, lr:0.01, w_d:100.0 => Score:-0.013454
[80/128]	Width:512, lr:0.01, w_d:0.0 => Score:-0.013468
[81/128]	Width:512, lr:0.1, w_d:0.0001 => Score:-0.013477
[82/128]	Width:512, lr:0.1, w_d:0.001 => Score:-0.013454
[83/128]	Width:512, lr:0.1, w_d:0.01 => Score:-0.013452
[84/128]	Width:512, lr:0.1, w_d:0.1 => Score:-0.013452
[85/128]	Width:512, lr:0.1, w_d:1.0 => Score:-0.013453
[86/128]	Width:512, lr:0.1, w_d:10.0 => Score:-0.013455
[87/128]	Width:512, lr:0.1, w_d:100.0 => Score:-0.013464
[88/128]	Width:512, lr:0.1, w_d:0.0 => Score:-0.013464
[89/128]	Width:512, lr:1.0, w_d:0.0001 => Score:-0.013454
[90/128]	Width:512, lr:1.0, w_d:0.001 => Score:-0.013457
[91/128]	Width:512, lr:1.0, w_d:0.01 => Score:-0.013457
[92/128]	Width:512, lr:1.0, w_d:0.1 => Score:-0.013458
[93/128]	Width:512, lr:1.0, w_d:1.0 => Score:-0.013461
[94/128]	Width:512, lr:1.0, w_d:10.0 => Score:-0.106862
[95/128]	Width:512, lr:1.0, w_d:100.0 => Score:-0.016605
[96/128]	Width:512, lr:1.0, w_d:0.0 => Score:-0.013449
[97/128]	Width:1024, lr:0.001, w_d:0.0001 => Score:-0.022772
[98/128]	Width:1024, lr:0.001, w_d:0.001 => Score:-0.022772
[99/128]	Width:1024, lr:0.001, w_d:0.01 => Score:-0.022772
[100/128]	Width:1024, lr:0.001, w_d:0.1 => Score:-0.022774
[101/128]	Width:1024, lr:0.001, w_d:1.0 => Score:-0.022813
[102/128]	Width:1024, lr:0.001, w_d:10.0 => Score:-0.022816
[103/128]	Width:1024, lr:0.001, w_d:100.0 => Score:-0.022790
[104/128]	Width:1024, lr:0.001, w_d:0.0 => Score:-0.022772
[105/128]	Width:1024, lr:0.01, w_d:0.0001 => Score:-0.022755
[106/128]	Width:1024, lr:0.01, w_d:0.001 => Score:-0.022757
[107/128]	Width:1024, lr:0.01, w_d:0.01 => Score:-0.022767
[108/128]	Width:1024, lr:0.01, w_d:0.1 => Score:-0.022787
[109/128]	Width:1024, lr:0.01, w_d:1.0 => Score:-0.022778
[110/128]	Width:1024, lr:0.01, w_d:10.0 => Score:-0.022782
[111/128]	Width:1024, lr:0.01, w_d:100.0 => Score:-0.022790
[112/128]	Width:1024, lr:0.01, w_d:0.0 => Score:-0.022755
[113/128]	Width:1024, lr:0.1, w_d:0.0001 => Score:-0.022759
[114/128]	Width:1024, lr:0.1, w_d:0.001 => Score:-0.022798
[115/128]	Width:1024, lr:0.1, w_d:0.01 => Score:-0.022775
[116/128]	Width:1024, lr:0.1, w_d:0.1 => Score:-0.022774
[117/128]	Width:1024, lr:0.1, w_d:1.0 => Score:-0.022775
[118/128]	Width:1024, lr:0.1, w_d:10.0 => Score:-0.022779
[119/128]	Width:1024, lr:0.1, w_d:100.0 => Score:-0.022801
[120/128]	Width:1024, lr:0.1, w_d:0.0 => Score:-0.022753
[121/128]	Width:1024, lr:1.0, w_d:0.0001 => Score:-0.022792
[122/128]	Width:1024, lr:1.0, w_d:0.001 => Score:-0.022820
[123/128]	Width:1024, lr:1.0, w_d:0.01 => Score:-0.022822
[124/128]	Width:1024, lr:1.0, w_d:0.1 => Score:-0.022822
[125/128]	Width:1024, lr:1.0, w_d:1.0 => Score:-0.022813
[126/128]	Width:1024, lr:1.0, w_d:10.0 => Score:-0.268013
[127/128]	Width:1024, lr:1.0, w_d:100.0 => Score:-0.068437
[128/128]	Width:1024, lr:1.0, w_d:0.0 => Score:-0.022772

Best validation score after 20 epochs: -0.013448. Best configuration:
Width:512, lr:0.001, w_d:1.0
preds_train_nn.shape == torch.Size([8000, 1]), preds_val_nn.shape == torch.Size([1000, 1]), preds_test_nn.shape == torch.Size([1000, 1])
score_train == -3.301835775375366, score_val == -0.013762171380221844, score_test == -0.008588741533458233
Best params for NTK: {'C': 100.0}
Best score for NTK: -3.301444912464727
Best params for RBF: {'C': 100.0, 'gamma': 'scale'}
Best score for RBF: -2.6170685710828954
Best kernel: rbf
preds_train_km.shape == (8000,), preds_val_km.shape == (1000,), preds_test_km.shape == (1000,)
score_train == 0.2539738717565983, score_val == 0.050886522072477354, score_test == 0.0773831735125496
