X.shape == torch.Size([10000, 100])
scale_factor == 0.004732361529022455
Y.shape == torch.Size([10000, 1])
X_train.shape == torch.Size([8000, 100]), Y_train.shape == torch.Size([8000, 1])
X_val.shape == torch.Size([1000, 100]), Y_val.shape == torch.Size([1000, 1])
X_test.shape == torch.Size([1000, 100]), Y_test.shape == torch.Size([1000, 1])
Cross-validating across 128 models.
[1/128]	Width:128, lr:0.001, w_d:0.0001 => Score:-0.006583
[2/128]	Width:128, lr:0.001, w_d:0.001 => Score:-0.006583
[3/128]	Width:128, lr:0.001, w_d:0.01 => Score:-0.006584
[4/128]	Width:128, lr:0.001, w_d:0.1 => Score:-0.006602
[5/128]	Width:128, lr:0.001, w_d:1.0 => Score:-0.007538
[6/128]	Width:128, lr:0.001, w_d:10.0 => Score:-0.007584
[7/128]	Width:128, lr:0.001, w_d:100.0 => Score:-0.007346
[8/128]	Width:128, lr:0.001, w_d:0.0 => Score:-0.006583
[9/128]	Width:128, lr:0.01, w_d:0.0001 => Score:-0.006599
[10/128]	Width:128, lr:0.01, w_d:0.001 => Score:-0.006597
[11/128]	Width:128, lr:0.01, w_d:0.01 => Score:-0.006589
[12/128]	Width:128, lr:0.01, w_d:0.1 => Score:-0.006614
[13/128]	Width:128, lr:0.01, w_d:1.0 => Score:-0.006574
[14/128]	Width:128, lr:0.01, w_d:10.0 => Score:-0.006572
[15/128]	Width:128, lr:0.01, w_d:100.0 => Score:-0.006572
[16/128]	Width:128, lr:0.01, w_d:0.0 => Score:-0.006599
[17/128]	Width:128, lr:0.1, w_d:0.0001 => Score:-0.006681
[18/128]	Width:128, lr:0.1, w_d:0.001 => Score:-0.006653
[19/128]	Width:128, lr:0.1, w_d:0.01 => Score:-0.006580
[20/128]	Width:128, lr:0.1, w_d:0.1 => Score:-0.006574
[21/128]	Width:128, lr:0.1, w_d:1.0 => Score:-0.006574
[22/128]	Width:128, lr:0.1, w_d:10.0 => Score:-0.006573
[23/128]	Width:128, lr:0.1, w_d:100.0 => Score:-0.006572
[24/128]	Width:128, lr:0.1, w_d:0.0 => Score:-0.006689
[25/128]	Width:128, lr:1.0, w_d:0.0001 => Score:-0.006654
[26/128]	Width:128, lr:1.0, w_d:0.001 => Score:-0.006617
[27/128]	Width:128, lr:1.0, w_d:0.01 => Score:-0.006621
[28/128]	Width:128, lr:1.0, w_d:0.1 => Score:-0.006619
[29/128]	Width:128, lr:1.0, w_d:1.0 => Score:-0.006607
[30/128]	Width:128, lr:1.0, w_d:10.0 => Score:-0.006527
[31/128]	Width:128, lr:1.0, w_d:100.0 => Score:-0.006524
[32/128]	Width:128, lr:1.0, w_d:0.0 => Score:-0.006689
[33/128]	Width:256, lr:0.001, w_d:0.0001 => Score:-0.006641
[34/128]	Width:256, lr:0.001, w_d:0.001 => Score:-0.006641
[35/128]	Width:256, lr:0.001, w_d:0.01 => Score:-0.006639
[36/128]	Width:256, lr:0.001, w_d:0.1 => Score:-0.006629
[37/128]	Width:256, lr:0.001, w_d:1.0 => Score:-0.006804
[38/128]	Width:256, lr:0.001, w_d:10.0 => Score:-0.006722
[39/128]	Width:256, lr:0.001, w_d:100.0 => Score:-0.006610
[40/128]	Width:256, lr:0.001, w_d:0.0 => Score:-0.006641
[41/128]	Width:256, lr:0.01, w_d:0.0001 => Score:-0.006672
[42/128]	Width:256, lr:0.01, w_d:0.001 => Score:-0.006668
[43/128]	Width:256, lr:0.01, w_d:0.01 => Score:-0.006643
[44/128]	Width:256, lr:0.01, w_d:0.1 => Score:-0.006631
[45/128]	Width:256, lr:0.01, w_d:1.0 => Score:-0.006609
[46/128]	Width:256, lr:0.01, w_d:10.0 => Score:-0.006607
[47/128]	Width:256, lr:0.01, w_d:100.0 => Score:-0.006607
[48/128]	Width:256, lr:0.01, w_d:0.0 => Score:-0.006672
[49/128]	Width:256, lr:0.1, w_d:0.0001 => Score:-0.006825
[50/128]	Width:256, lr:0.1, w_d:0.001 => Score:-0.006793
[51/128]	Width:256, lr:0.1, w_d:0.01 => Score:-0.006634
[52/128]	Width:256, lr:0.1, w_d:0.1 => Score:-0.006625
[53/128]	Width:256, lr:0.1, w_d:1.0 => Score:-0.006623
[54/128]	Width:256, lr:0.1, w_d:10.0 => Score:-0.006616
[55/128]	Width:256, lr:0.1, w_d:100.0 => Score:-0.006607
[56/128]	Width:256, lr:0.1, w_d:0.0 => Score:-0.006818
[57/128]	Width:256, lr:1.0, w_d:0.0001 => Score:-0.006819
[58/128]	Width:256, lr:1.0, w_d:0.001 => Score:-0.006796
[59/128]	Width:256, lr:1.0, w_d:0.01 => Score:-0.006787
[60/128]	Width:256, lr:1.0, w_d:0.1 => Score:-0.006800
[61/128]	Width:256, lr:1.0, w_d:1.0 => Score:-0.006783
[62/128]	Width:256, lr:1.0, w_d:10.0 => Score:-0.006564
[63/128]	Width:256, lr:1.0, w_d:100.0 => Score:-0.009847
[64/128]	Width:256, lr:1.0, w_d:0.0 => Score:-0.006852
[65/128]	Width:512, lr:0.001, w_d:0.0001 => Score:-0.006599
[66/128]	Width:512, lr:0.001, w_d:0.001 => Score:-0.006598
[67/128]	Width:512, lr:0.001, w_d:0.01 => Score:-0.006596
[68/128]	Width:512, lr:0.001, w_d:0.1 => Score:-0.006580
[69/128]	Width:512, lr:0.001, w_d:1.0 => Score:-0.006566
[70/128]	Width:512, lr:0.001, w_d:10.0 => Score:-0.006563
[71/128]	Width:512, lr:0.001, w_d:100.0 => Score:-0.006563
[72/128]	Width:512, lr:0.001, w_d:0.0 => Score:-0.006599
[73/128]	Width:512, lr:0.01, w_d:0.0001 => Score:-0.006614
[74/128]	Width:512, lr:0.01, w_d:0.001 => Score:-0.006611
[75/128]	Width:512, lr:0.01, w_d:0.01 => Score:-0.006588
[76/128]	Width:512, lr:0.01, w_d:0.1 => Score:-0.006563
[77/128]	Width:512, lr:0.01, w_d:1.0 => Score:-0.006564
[78/128]	Width:512, lr:0.01, w_d:10.0 => Score:-0.006563
[79/128]	Width:512, lr:0.01, w_d:100.0 => Score:-0.006563
[80/128]	Width:512, lr:0.01, w_d:0.0 => Score:-0.006615
[81/128]	Width:512, lr:0.1, w_d:0.0001 => Score:-0.006703
[82/128]	Width:512, lr:0.1, w_d:0.001 => Score:-0.006646
[83/128]	Width:512, lr:0.1, w_d:0.01 => Score:-0.006563
[84/128]	Width:512, lr:0.1, w_d:0.1 => Score:-0.006563
[85/128]	Width:512, lr:0.1, w_d:1.0 => Score:-0.006563
[86/128]	Width:512, lr:0.1, w_d:10.0 => Score:-0.006563
[87/128]	Width:512, lr:0.1, w_d:100.0 => Score:-0.006564
[88/128]	Width:512, lr:0.1, w_d:0.0 => Score:-0.006710
[89/128]	Width:512, lr:1.0, w_d:0.0001 => Score:-0.006602
[90/128]	Width:512, lr:1.0, w_d:0.001 => Score:-0.006568
[91/128]	Width:512, lr:1.0, w_d:0.01 => Score:-0.006566
[92/128]	Width:512, lr:1.0, w_d:0.1 => Score:-0.006568
[93/128]	Width:512, lr:1.0, w_d:1.0 => Score:-0.006566
[94/128]	Width:512, lr:1.0, w_d:10.0 => Score:-0.016471
[95/128]	Width:512, lr:1.0, w_d:100.0 => Score:-0.006904
[96/128]	Width:512, lr:1.0, w_d:0.0 => Score:-0.006624
[97/128]	Width:1024, lr:0.001, w_d:0.0001 => Score:-0.009867
[98/128]	Width:1024, lr:0.001, w_d:0.001 => Score:-0.009867
[99/128]	Width:1024, lr:0.001, w_d:0.01 => Score:-0.009867
[100/128]	Width:1024, lr:0.001, w_d:0.1 => Score:-0.009871
[101/128]	Width:1024, lr:0.001, w_d:1.0 => Score:-0.009897
[102/128]	Width:1024, lr:0.001, w_d:10.0 => Score:-0.009888
[103/128]	Width:1024, lr:0.001, w_d:100.0 => Score:-0.009860
[104/128]	Width:1024, lr:0.001, w_d:0.0 => Score:-0.009867
[105/128]	Width:1024, lr:0.01, w_d:0.0001 => Score:-0.009866
[106/128]	Width:1024, lr:0.01, w_d:0.001 => Score:-0.009869
[107/128]	Width:1024, lr:0.01, w_d:0.01 => Score:-0.009875
[108/128]	Width:1024, lr:0.01, w_d:0.1 => Score:-0.009881
[109/128]	Width:1024, lr:0.01, w_d:1.0 => Score:-0.009870
[110/128]	Width:1024, lr:0.01, w_d:10.0 => Score:-0.009865
[111/128]	Width:1024, lr:0.01, w_d:100.0 => Score:-0.009860
[112/128]	Width:1024, lr:0.01, w_d:0.0 => Score:-0.009864
[113/128]	Width:1024, lr:0.1, w_d:0.0001 => Score:-0.009848
[114/128]	Width:1024, lr:0.1, w_d:0.001 => Score:-0.009846
[115/128]	Width:1024, lr:0.1, w_d:0.01 => Score:-0.009875
[116/128]	Width:1024, lr:0.1, w_d:0.1 => Score:-0.009874
[117/128]	Width:1024, lr:0.1, w_d:1.0 => Score:-0.009873
[118/128]	Width:1024, lr:0.1, w_d:10.0 => Score:-0.009867
[119/128]	Width:1024, lr:0.1, w_d:100.0 => Score:-0.009858
[120/128]	Width:1024, lr:0.1, w_d:0.0 => Score:-0.009851
[121/128]	Width:1024, lr:1.0, w_d:0.0001 => Score:-0.009872
[122/128]	Width:1024, lr:1.0, w_d:0.001 => Score:-0.009883
[123/128]	Width:1024, lr:1.0, w_d:0.01 => Score:-0.009884
[124/128]	Width:1024, lr:1.0, w_d:0.1 => Score:-0.009883
[125/128]	Width:1024, lr:1.0, w_d:1.0 => Score:-0.009879
[126/128]	Width:1024, lr:1.0, w_d:10.0 => Score:-0.117947
[127/128]	Width:1024, lr:1.0, w_d:100.0 => Score:-0.093080
[128/128]	Width:1024, lr:1.0, w_d:0.0 => Score:-0.009898

Best validation score after 20 epochs: -0.006524. Best configuration:
Width:128, lr:1.0, w_d:100.0
preds_train_nn.shape == torch.Size([8000, 1]), preds_val_nn.shape == torch.Size([1000, 1]), preds_test_nn.shape == torch.Size([1000, 1])
score_train == -1.0962108373641968, score_val == -0.012485567480325699, score_test == -0.02320147678256035
Best params for NTK: {'C': 0.0001}
Best score for NTK: -1.08849649993462
Best params for RBF: {'C': 100.0, 'gamma': 'scale'}
Best score for RBF: -0.7460765402116386
Best kernel: rbf
preds_train_km.shape == (8000,), preds_val_km.shape == (1000,), preds_test_km.shape == (1000,)
score_train == 0.005157809530508647, score_val == 0.028883069565758226, score_test == 0.10425970279982587
