X.shape == torch.Size([10000, 100])
scale_factor == 0.004732361529022455
Y.shape == torch.Size([10000, 1])
X_train.shape == torch.Size([8000, 100]), Y_train.shape == torch.Size([8000, 1])
X_val.shape == torch.Size([1000, 100]), Y_val.shape == torch.Size([1000, 1])
X_test.shape == torch.Size([1000, 100]), Y_test.shape == torch.Size([1000, 1])
Cross-validating across 128 models.
[1/128]	Width:128, lr:0.001, w_d:0.0001 => Score:-0.199493
[2/128]	Width:128, lr:0.001, w_d:0.001 => Score:-0.199495
[3/128]	Width:128, lr:0.001, w_d:0.01 => Score:-0.199516
[4/128]	Width:128, lr:0.001, w_d:0.1 => Score:-0.199806
[5/128]	Width:128, lr:0.001, w_d:1.0 => Score:-0.200060
[6/128]	Width:128, lr:0.001, w_d:10.0 => Score:-0.198170
[7/128]	Width:128, lr:0.001, w_d:100.0 => Score:-0.197465
[8/128]	Width:128, lr:0.001, w_d:0.0 => Score:-0.199493
[9/128]	Width:128, lr:0.01, w_d:0.0001 => Score:-0.197903
[10/128]	Width:128, lr:0.01, w_d:0.001 => Score:-0.197907
[11/128]	Width:128, lr:0.01, w_d:0.01 => Score:-0.197958
[12/128]	Width:128, lr:0.01, w_d:0.1 => Score:-0.198661
[13/128]	Width:128, lr:0.01, w_d:1.0 => Score:-0.197579
[14/128]	Width:128, lr:0.01, w_d:10.0 => Score:-0.198031
[15/128]	Width:128, lr:0.01, w_d:100.0 => Score:-0.198256
[16/128]	Width:128, lr:0.01, w_d:0.0 => Score:-0.197905
[17/128]	Width:128, lr:0.1, w_d:0.0001 => Score:-0.195280
[18/128]	Width:128, lr:0.1, w_d:0.001 => Score:-0.196540
[19/128]	Width:128, lr:0.1, w_d:0.01 => Score:-0.198005
[20/128]	Width:128, lr:0.1, w_d:0.1 => Score:-0.197796
[21/128]	Width:128, lr:0.1, w_d:1.0 => Score:-0.197476
[22/128]	Width:128, lr:0.1, w_d:10.0 => Score:-0.198050
[23/128]	Width:128, lr:0.1, w_d:100.0 => Score:-0.198291
[24/128]	Width:128, lr:0.1, w_d:0.0 => Score:-0.195098
[25/128]	Width:128, lr:1.0, w_d:0.0001 => Score:-0.115949
[26/128]	Width:128, lr:1.0, w_d:0.001 => Score:-0.292875
[27/128]	Width:128, lr:1.0, w_d:0.01 => Score:-0.197710
[28/128]	Width:128, lr:1.0, w_d:0.1 => Score:-0.197663
[29/128]	Width:128, lr:1.0, w_d:1.0 => Score:-0.197510
[30/128]	Width:128, lr:1.0, w_d:10.0 => Score:-0.199233
[31/128]	Width:128, lr:1.0, w_d:100.0 => Score:-0.202720
[32/128]	Width:128, lr:1.0, w_d:0.0 => Score:-0.023563
[33/128]	Width:256, lr:0.001, w_d:0.0001 => Score:-0.198391
[34/128]	Width:256, lr:0.001, w_d:0.001 => Score:-0.198391
[35/128]	Width:256, lr:0.001, w_d:0.01 => Score:-0.198385
[36/128]	Width:256, lr:0.001, w_d:0.1 => Score:-0.198339
[37/128]	Width:256, lr:0.001, w_d:1.0 => Score:-0.197960
[38/128]	Width:256, lr:0.001, w_d:10.0 => Score:-0.197815
[39/128]	Width:256, lr:0.001, w_d:100.0 => Score:-0.198373
[40/128]	Width:256, lr:0.001, w_d:0.0 => Score:-0.198392
[41/128]	Width:256, lr:0.01, w_d:0.0001 => Score:-0.198244
[42/128]	Width:256, lr:0.01, w_d:0.001 => Score:-0.198251
[43/128]	Width:256, lr:0.01, w_d:0.01 => Score:-0.198288
[44/128]	Width:256, lr:0.01, w_d:0.1 => Score:-0.197960
[45/128]	Width:256, lr:0.01, w_d:1.0 => Score:-0.197800
[46/128]	Width:256, lr:0.01, w_d:10.0 => Score:-0.198274
[47/128]	Width:256, lr:0.01, w_d:100.0 => Score:-0.198472
[48/128]	Width:256, lr:0.01, w_d:0.0 => Score:-0.198239
[49/128]	Width:256, lr:0.1, w_d:0.0001 => Score:-0.188018
[50/128]	Width:256, lr:0.1, w_d:0.001 => Score:-0.192013
[51/128]	Width:256, lr:0.1, w_d:0.01 => Score:-0.198275
[52/128]	Width:256, lr:0.1, w_d:0.1 => Score:-0.198196
[53/128]	Width:256, lr:0.1, w_d:1.0 => Score:-0.197801
[54/128]	Width:256, lr:0.1, w_d:10.0 => Score:-0.198231
[55/128]	Width:256, lr:0.1, w_d:100.0 => Score:-0.198495
[56/128]	Width:256, lr:0.1, w_d:0.0 => Score:-0.187485
[57/128]	Width:256, lr:1.0, w_d:0.0001 => Score:-0.020145
[58/128]	Width:256, lr:1.0, w_d:0.001 => Score:-0.286445
[59/128]	Width:256, lr:1.0, w_d:0.01 => Score:-0.199138
[60/128]	Width:256, lr:1.0, w_d:0.1 => Score:-0.198731
[61/128]	Width:256, lr:1.0, w_d:1.0 => Score:-0.197870
[62/128]	Width:256, lr:1.0, w_d:10.0 => Score:-0.205328
[63/128]	Width:256, lr:1.0, w_d:100.0 => Score:-0.223558
[64/128]	Width:256, lr:1.0, w_d:0.0 => Score:-0.019331
[65/128]	Width:512, lr:0.001, w_d:0.0001 => Score:-0.196733
[66/128]	Width:512, lr:0.001, w_d:0.001 => Score:-0.196732
[67/128]	Width:512, lr:0.001, w_d:0.01 => Score:-0.196722
[68/128]	Width:512, lr:0.001, w_d:0.1 => Score:-0.196675
[69/128]	Width:512, lr:0.001, w_d:1.0 => Score:-0.197277
[70/128]	Width:512, lr:0.001, w_d:10.0 => Score:-0.197386
[71/128]	Width:512, lr:0.001, w_d:100.0 => Score:-0.197341
[72/128]	Width:512, lr:0.001, w_d:0.0 => Score:-0.196733
[73/128]	Width:512, lr:0.01, w_d:0.0001 => Score:-0.197084
[74/128]	Width:512, lr:0.01, w_d:0.001 => Score:-0.197086
[75/128]	Width:512, lr:0.01, w_d:0.01 => Score:-0.197126
[76/128]	Width:512, lr:0.01, w_d:0.1 => Score:-0.196777
[77/128]	Width:512, lr:0.01, w_d:1.0 => Score:-0.196759
[78/128]	Width:512, lr:0.01, w_d:10.0 => Score:-0.197146
[79/128]	Width:512, lr:0.01, w_d:100.0 => Score:-0.197344
[80/128]	Width:512, lr:0.01, w_d:0.0 => Score:-0.197084
[81/128]	Width:512, lr:0.1, w_d:0.0001 => Score:-0.182262
[82/128]	Width:512, lr:0.1, w_d:0.001 => Score:-0.187464
[83/128]	Width:512, lr:0.1, w_d:0.01 => Score:-0.196997
[84/128]	Width:512, lr:0.1, w_d:0.1 => Score:-0.197093
[85/128]	Width:512, lr:0.1, w_d:1.0 => Score:-0.196695
[86/128]	Width:512, lr:0.1, w_d:10.0 => Score:-0.197156
[87/128]	Width:512, lr:0.1, w_d:100.0 => Score:-0.197376
[88/128]	Width:512, lr:0.1, w_d:0.0 => Score:-0.181669
[89/128]	Width:512, lr:1.0, w_d:0.0001 => Score:-0.018767
[90/128]	Width:512, lr:1.0, w_d:0.001 => Score:-0.269799
[91/128]	Width:512, lr:1.0, w_d:0.01 => Score:-0.197165
[92/128]	Width:512, lr:1.0, w_d:0.1 => Score:-0.197034
[93/128]	Width:512, lr:1.0, w_d:1.0 => Score:-0.196695
[94/128]	Width:512, lr:1.0, w_d:10.0 => Score:-0.206244
[95/128]	Width:512, lr:1.0, w_d:100.0 => Score:-0.257390
[96/128]	Width:512, lr:1.0, w_d:0.0 => Score:-0.019880
[97/128]	Width:1024, lr:0.001, w_d:0.0001 => Score:-0.196790
[98/128]	Width:1024, lr:0.001, w_d:0.001 => Score:-0.196790
[99/128]	Width:1024, lr:0.001, w_d:0.01 => Score:-0.196779
[100/128]	Width:1024, lr:0.001, w_d:0.1 => Score:-0.196679
[101/128]	Width:1024, lr:0.001, w_d:1.0 => Score:-0.196930
[102/128]	Width:1024, lr:0.001, w_d:10.0 => Score:-0.197219
[103/128]	Width:1024, lr:0.001, w_d:100.0 => Score:-0.197578
[104/128]	Width:1024, lr:0.001, w_d:0.0 => Score:-0.196791
[105/128]	Width:1024, lr:0.01, w_d:0.0001 => Score:-0.196692
[106/128]	Width:1024, lr:0.01, w_d:0.001 => Score:-0.196713
[107/128]	Width:1024, lr:0.01, w_d:0.01 => Score:-0.196837
[108/128]	Width:1024, lr:0.01, w_d:0.1 => Score:-0.196686
[109/128]	Width:1024, lr:0.01, w_d:1.0 => Score:-0.196739
[110/128]	Width:1024, lr:0.01, w_d:10.0 => Score:-0.197340
[111/128]	Width:1024, lr:0.01, w_d:100.0 => Score:-0.197585
[112/128]	Width:1024, lr:0.01, w_d:0.0 => Score:-0.196691
[113/128]	Width:1024, lr:0.1, w_d:0.0001 => Score:-0.177052
[114/128]	Width:1024, lr:0.1, w_d:0.001 => Score:-0.181104
[115/128]	Width:1024, lr:0.1, w_d:0.01 => Score:-0.196839
[116/128]	Width:1024, lr:0.1, w_d:0.1 => Score:-0.196870
[117/128]	Width:1024, lr:0.1, w_d:1.0 => Score:-0.196678
[118/128]	Width:1024, lr:0.1, w_d:10.0 => Score:-0.197366
[119/128]	Width:1024, lr:0.1, w_d:100.0 => Score:-0.197936
[120/128]	Width:1024, lr:0.1, w_d:0.0 => Score:-0.176993
[121/128]	Width:1024, lr:1.0, w_d:0.0001 => Score:-0.042813
[122/128]	Width:1024, lr:1.0, w_d:0.001 => Score:-0.246073
[123/128]	Width:1024, lr:1.0, w_d:0.01 => Score:-0.196833
[124/128]	Width:1024, lr:1.0, w_d:0.1 => Score:-0.196719
[125/128]	Width:1024, lr:1.0, w_d:1.0 => Score:-0.196687
[126/128]	Width:1024, lr:1.0, w_d:10.0 => Score:-0.215380
[127/128]	Width:1024, lr:1.0, w_d:100.0 => Score:-0.298295
[128/128]	Width:1024, lr:1.0, w_d:0.0 => Score:-0.032076

Best validation score after 20 epochs: -0.018767. Best configuration:
Width:512, lr:1.0, w_d:0.0001
preds_train_nn.shape == torch.Size([8000, 1]), preds_val_nn.shape == torch.Size([1000, 1]), preds_test_nn.shape == torch.Size([1000, 1])
score_train == -0.1620534360408783, score_val == -0.020952649414539337, score_test == -0.03876093775033951
Best params for NTK: {'C': 0.1}
Best score for NTK: -0.10151575868527138
Best params for RBF: {'C': 10.0, 'gamma': 'scale'}
Best score for RBF: -0.029298245794401895
Best kernel: rbf
preds_train_km.shape == (8000,), preds_val_km.shape == (1000,), preds_test_km.shape == (1000,)
score_train == 0.004426813386742932, score_val == 0.009415049148197695, score_test == 0.008642035582771358
