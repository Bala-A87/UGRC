X_train.shape == torch.Size([25400, 7])
Y_train.shape == torch.Size([25400, 1])
Empty orthant is orthant number 80
X_test.shape == torch.Size([128, 200, 7])
Y_test.shape == torch.Size([128, 200, 1])
Orthants neighboring the empty orthant are: [16, 64, 81, 82, 84, 88, 112]
X_empty_0.shape == torch.Size([100, 7])
X_empty_1.shape == torch.Size([100, 7])
Cross-validating across 108 models.

[1/108] Width: 32, lr: 0.0001, lambda: 1e-05 ==> score: 0.486607
[2/108] Width: 32, lr: 0.0001, lambda: 0.0001 ==> score: 0.508929
[3/108] Width: 32, lr: 0.0001, lambda: 0.001 ==> score: 0.571429
[4/108] Width: 32, lr: 0.0001, lambda: 0.01 ==> score: 0.446429
[5/108] Width: 32, lr: 0.0001, lambda: 0.1 ==> score: 0.500000
[6/108] Width: 32, lr: 0.0001, lambda: 1.0 ==> score: 0.486607
[7/108] Width: 32, lr: 0.0001, lambda: 10.0 ==> score: 0.500000
[8/108] Width: 32, lr: 0.0001, lambda: 100.0 ==> score: 0.473214
[9/108] Width: 32, lr: 0.0001, lambda: 1000.0 ==> score: 0.500000
[10/108] Width: 32, lr: 0.0001, lambda: 10000.0 ==> score: 0.500000
[11/108] Width: 32, lr: 0.0001, lambda: 100000.0 ==> score: 0.513393
[12/108] Width: 32, lr: 0.0001, lambda: 0.0 ==> score: 0.500000
[13/108] Width: 32, lr: 0.001, lambda: 1e-05 ==> score: 0.633929
[14/108] Width: 32, lr: 0.001, lambda: 0.0001 ==> score: 0.500000
[15/108] Width: 32, lr: 0.001, lambda: 0.001 ==> score: 0.839286
[16/108] Width: 32, lr: 0.001, lambda: 0.01 ==> score: 0.486607
[17/108] Width: 32, lr: 0.001, lambda: 0.1 ==> score: 0.500000
[18/108] Width: 32, lr: 0.001, lambda: 1.0 ==> score: 0.500000
[19/108] Width: 32, lr: 0.001, lambda: 10.0 ==> score: 0.500000
[20/108] Width: 32, lr: 0.001, lambda: 100.0 ==> score: 0.513393
[21/108] Width: 32, lr: 0.001, lambda: 1000.0 ==> score: 0.473214
[22/108] Width: 32, lr: 0.001, lambda: 10000.0 ==> score: 0.473214
[23/108] Width: 32, lr: 0.001, lambda: 100000.0 ==> score: 0.486607
[24/108] Width: 32, lr: 0.001, lambda: 0.0 ==> score: 0.696429
[25/108] Width: 32, lr: 0.01, lambda: 1e-05 ==> score: 0.513393
[26/108] Width: 32, lr: 0.01, lambda: 0.0001 ==> score: 0.473214
[27/108] Width: 32, lr: 0.01, lambda: 0.001 ==> score: 0.526786
[28/108] Width: 32, lr: 0.01, lambda: 0.01 ==> score: 0.473214
[29/108] Width: 32, lr: 0.01, lambda: 0.1 ==> score: 0.500000
[30/108] Width: 32, lr: 0.01, lambda: 1.0 ==> score: 0.459821
[31/108] Width: 32, lr: 0.01, lambda: 10.0 ==> score: 0.526786
[32/108] Width: 32, lr: 0.01, lambda: 100.0 ==> score: 0.500000
[33/108] Width: 32, lr: 0.01, lambda: 1000.0 ==> score: 0.513393
[34/108] Width: 32, lr: 0.01, lambda: 10000.0 ==> score: 0.486607
[35/108] Width: 32, lr: 0.01, lambda: 100000.0 ==> score: 0.459821
[36/108] Width: 32, lr: 0.01, lambda: 0.0 ==> score: 0.513393
[37/108] Width: 64, lr: 0.0001, lambda: 1e-05 ==> score: 0.500000
[38/108] Width: 64, lr: 0.0001, lambda: 0.0001 ==> score: 0.500000
[39/108] Width: 64, lr: 0.0001, lambda: 0.001 ==> score: 0.437500
[40/108] Width: 64, lr: 0.0001, lambda: 0.01 ==> score: 0.513393
[41/108] Width: 64, lr: 0.0001, lambda: 0.1 ==> score: 0.473214
[42/108] Width: 64, lr: 0.0001, lambda: 1.0 ==> score: 0.513393
[43/108] Width: 64, lr: 0.0001, lambda: 10.0 ==> score: 0.500000
[44/108] Width: 64, lr: 0.0001, lambda: 100.0 ==> score: 0.526786
[45/108] Width: 64, lr: 0.0001, lambda: 1000.0 ==> score: 0.486607
[46/108] Width: 64, lr: 0.0001, lambda: 10000.0 ==> score: 0.513393
[47/108] Width: 64, lr: 0.0001, lambda: 100000.0 ==> score: 0.500000
[48/108] Width: 64, lr: 0.0001, lambda: 0.0 ==> score: 0.526786
[49/108] Width: 64, lr: 0.001, lambda: 1e-05 ==> score: 0.714286
[50/108] Width: 64, lr: 0.001, lambda: 0.0001 ==> score: 0.830357
[51/108] Width: 64, lr: 0.001, lambda: 0.001 ==> score: 0.781250
[52/108] Width: 64, lr: 0.001, lambda: 0.01 ==> score: 0.513393
[53/108] Width: 64, lr: 0.001, lambda: 0.1 ==> score: 0.500000
[54/108] Width: 64, lr: 0.001, lambda: 1.0 ==> score: 0.486607
[55/108] Width: 64, lr: 0.001, lambda: 10.0 ==> score: 0.459821
[56/108] Width: 64, lr: 0.001, lambda: 100.0 ==> score: 0.486607
[57/108] Width: 64, lr: 0.001, lambda: 1000.0 ==> score: 0.513393
[58/108] Width: 64, lr: 0.001, lambda: 10000.0 ==> score: 0.473214
[59/108] Width: 64, lr: 0.001, lambda: 100000.0 ==> score: 0.513393
[60/108] Width: 64, lr: 0.001, lambda: 0.0 ==> score: 0.665179
[61/108] Width: 64, lr: 0.01, lambda: 1e-05 ==> score: 0.473214
[62/108] Width: 64, lr: 0.01, lambda: 0.0001 ==> score: 0.486607
[63/108] Width: 64, lr: 0.01, lambda: 0.001 ==> score: 0.500000
[64/108] Width: 64, lr: 0.01, lambda: 0.01 ==> score: 0.500000
[65/108] Width: 64, lr: 0.01, lambda: 0.1 ==> score: 0.486607
[66/108] Width: 64, lr: 0.01, lambda: 1.0 ==> score: 0.459821
[67/108] Width: 64, lr: 0.01, lambda: 10.0 ==> score: 0.526786
[68/108] Width: 64, lr: 0.01, lambda: 100.0 ==> score: 0.500000
[69/108] Width: 64, lr: 0.01, lambda: 1000.0 ==> score: 0.500000
[70/108] Width: 64, lr: 0.01, lambda: 10000.0 ==> score: 0.486607
[71/108] Width: 64, lr: 0.01, lambda: 100000.0 ==> score: 0.513393
[72/108] Width: 64, lr: 0.01, lambda: 0.0 ==> score: 0.526786
[73/108] Width: 128, lr: 0.0001, lambda: 1e-05 ==> score: 0.486607
[74/108] Width: 128, lr: 0.0001, lambda: 0.0001 ==> score: 0.486607
[75/108] Width: 128, lr: 0.0001, lambda: 0.001 ==> score: 0.455357
[76/108] Width: 128, lr: 0.0001, lambda: 0.01 ==> score: 0.491071
[77/108] Width: 128, lr: 0.0001, lambda: 0.1 ==> score: 0.500000
[78/108] Width: 128, lr: 0.0001, lambda: 1.0 ==> score: 0.473214
[79/108] Width: 128, lr: 0.0001, lambda: 10.0 ==> score: 0.459821
[80/108] Width: 128, lr: 0.0001, lambda: 100.0 ==> score: 0.513393
[81/108] Width: 128, lr: 0.0001, lambda: 1000.0 ==> score: 0.473214
[82/108] Width: 128, lr: 0.0001, lambda: 10000.0 ==> score: 0.513393
[83/108] Width: 128, lr: 0.0001, lambda: 100000.0 ==> score: 0.513393
[84/108] Width: 128, lr: 0.0001, lambda: 0.0 ==> score: 0.410714
[85/108] Width: 128, lr: 0.001, lambda: 1e-05 ==> score: 0.812500
[86/108] Width: 128, lr: 0.001, lambda: 0.0001 ==> score: 0.848214
[87/108] Width: 128, lr: 0.001, lambda: 0.001 ==> score: 0.767857
[88/108] Width: 128, lr: 0.001, lambda: 0.01 ==> score: 0.486607
[89/108] Width: 128, lr: 0.001, lambda: 0.1 ==> score: 0.473214
[90/108] Width: 128, lr: 0.001, lambda: 1.0 ==> score: 0.540179
[91/108] Width: 128, lr: 0.001, lambda: 10.0 ==> score: 0.500000
[92/108] Width: 128, lr: 0.001, lambda: 100.0 ==> score: 0.473214
[93/108] Width: 128, lr: 0.001, lambda: 1000.0 ==> score: 0.526786
[94/108] Width: 128, lr: 0.001, lambda: 10000.0 ==> score: 0.500000
[95/108] Width: 128, lr: 0.001, lambda: 100000.0 ==> score: 0.486607
[96/108] Width: 128, lr: 0.001, lambda: 0.0 ==> score: 0.946429
[97/108] Width: 128, lr: 0.01, lambda: 1e-05 ==> score: 0.513393
[98/108] Width: 128, lr: 0.01, lambda: 0.0001 ==> score: 0.540179
[99/108] Width: 128, lr: 0.01, lambda: 0.001 ==> score: 0.486607
[100/108] Width: 128, lr: 0.01, lambda: 0.01 ==> score: 0.500000
[101/108] Width: 128, lr: 0.01, lambda: 0.1 ==> score: 0.473214
[102/108] Width: 128, lr: 0.01, lambda: 1.0 ==> score: 0.500000
[103/108] Width: 128, lr: 0.01, lambda: 10.0 ==> score: 0.500000
[104/108] Width: 128, lr: 0.01, lambda: 100.0 ==> score: 0.500000
[105/108] Width: 128, lr: 0.01, lambda: 1000.0 ==> score: 0.500000
[106/108] Width: 128, lr: 0.01, lambda: 10000.0 ==> score: 0.486607
[107/108] Width: 128, lr: 0.01, lambda: 100000.0 ==> score: 0.500000
[108/108] Width: 128, lr: 0.01, lambda: 0.0 ==> score: 0.473214

Best validation score after 10 epochs: 0.946429
Best configuration: width: 128, lr: 0.001, lambda: 0.0
Average accuracy across all orthants: 0.9814062118530273
Accuracy in empty orthant: 0.9900000095367432
Cross-validation across 11 models.

[1/11]	C:1e-05, train score:0.6662598425196851, val score:0.5

Best validation accuracy: 0.5, for C = 1e-05
[2/11]	C:0.0001, train score:0.6392125984251968, val score:0.515

Best validation accuracy: 0.515, for C = 0.0001
[3/11]	C:0.001, train score:0.6511811023622047, val score:0.565

Best validation accuracy: 0.565, for C = 0.001
[4/11]	C:0.01, train score:0.6732283464566929, val score:0.565

Best validation accuracy: 0.565, for C = 0.001
[5/11]	C:0.1, train score:0.7095275590551181, val score:0.575

Best validation accuracy: 0.575, for C = 0.1
[6/11]	C:1.0, train score:0.7634645669291339, val score:0.57

Best validation accuracy: 0.575, for C = 0.1
[7/11]	C:10.0, train score:0.8273622047244095, val score:0.6

Best validation accuracy: 0.6, for C = 10.0
[8/11]	C:100.0, train score:0.8800787401574803, val score:0.645

Best validation accuracy: 0.645, for C = 100.0
[9/11]	C:1000.0, train score:0.8949212598425197, val score:0.655

Best validation accuracy: 0.655, for C = 1000.0
[10/11]	C:10000.0, train score:0.8909055118110236, val score:0.655

Best validation accuracy: 0.655, for C = 1000.0
[11/11]	C:100000.0, train score:0.8851574803149607, val score:0.655

Best validation accuracy: 0.655, for C = 1000.0
Train accuracy with NTK: 0.9246456692913386
Validation accuracy with NTK: 0.69
Average accuracy across all orthants: 0.9001953125
Accuracy in empty orthant: 0.69
